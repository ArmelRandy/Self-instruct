{"instruction": "Alice has been working hard on her new programming language, but she needs some help debugging it. She wrote down a few test cases, but when Alice runs these tests, they don\u2019t work correctly. Can you figure out why?\n\n```\n>>> add(3, 4)\n7\n>>> subtract(7, 5)\n2\n>>> multiply(2, 3)\n6\n>>> divide(6, 3)\n2\n```", "input": "", "output": "In order to debug the program, we need to know what functions were defined before running the above statements. Since none of those functions appear to exist, we can assume that the problem lies within the definition of the functions themselves. Let us examine the definitions of the four functions:\n\nadd(x, y), subtract(x, y), multiply(x, y), divide(x, y)\n\nWe notice that the parameters passed into the functions are named x and y instead of a and b. This means that the variables being added/subtracted/multiplied/divided must be called x and y respectively. Thus, the expected results of the above statements are incorrect. In order to fix this bug, we simply change the names of the arguments inside the parentheses so that they match their corresponding values.\n\nFor example, the statement \u201c>>> add(3, 4)\u201d becomes \u201c>>> add(a, b)\u201d. Now, the interpreter knows that the sum of 3 and 4 equals 7. Similarly, the other three statements become \u201c>>> subtract(a, b)\u201d, \u201c>>> multiply(a, b)\u201d, and \u201c>>> divide(a, b)\u201d.", "most_similar": {"Parse the natural language query into a SQL query that can be executed on the table.": 0.08333333333333333, "Create a calculator in the Python programming language": 0.0625, "Write a python script that runs shellscript.sh every 60 minutes": 0.05970149253731343, "How do I compile a go program on Linux to a windows executable?": 0.05797101449275363, "Hey! In php, when I use `ini_set('memory_limit','6GB');`, it gives blank page? Why is that?": 0.05405405405405406, "def _process(self, data):\n    X = data[1] + \" \" + data[2]\n    Y = pd.get_dummies(data[0], prefix=\"y\").astype(np.float32)\n    return X, Y, len(data)\nI have a bug `Failed to convert a NumPy array to a Tensor (Unsupported object type float).`. Can you show me where is the problem and how to fix it": 0.05405405405405405, "I have 2 EC2 machines on AWS, I'm having trouble making them communicate. How could I troubleshoot it?": 0.05333333333333334, "Can you provide a shell script that displays the total number of lines in all '*.txt' files in the current directory?": 0.051948051948051945, "Make a python function that takes time segments and combine then if they overlap, like this: [[0, 10], [8, 20], [25, 30]] => [[0, 20], [25, 30]]": 0.04878048780487805, "Fill in the <mask> in the html document with a propoer text. You should take the html tag into consideration. You output should be the completed html document.": 0.047619047619047616}, "avg_similarity_score": 0.02697708080135611}
{"instruction": "Implement a function that accepts a string containing digits from 2-9 with various lengths. The function should replace every digit with the word equivalent of that digit (e.g., 2 becomes \u2018two\u2019, 3 becomes \u2018three\u2019, \u2026 , 9 becomes \u2018nine\u2019). There is no need to validate the contents of the input string.", "input": "", "output": "Here is an example solution:\n\n```javascript\nfunction numToWord(str){\n   var dict={};\n   dict['2']='two';dict['3']='three';dict['4']='four';dict['5']='five';dict['6']='six';dict['7']='seven';dict['8']='eight';dict['9']='nine';\n   str=str.split(\"\");\n   for(var i=0;i<str.length;i++){\n       console.log(dict[str[i]]+' ')\n   };\n}\nnumToWord('23456789');\n```\n\nNote that the dictionary object stores key-value pairs such that the keys represent the numeric characters and the values represent the strings representing the words. Whenever a character appears in the input string, the corresponding value stored in the dictionary is printed.", "most_similar": {"Write a python function that sorts a list from large to small.": 0.19047619047619047, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.17647058823529413, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.16901408450704228, "Write a Python program that takes a list of numbers as input from the user, calculates the sum of all even numbers in the list, and returns the result. The program should check if the input is valid (i.e., if it's a list of numbers), and if it's not, it should return an error message. The program should also handle exceptions gracefully and return a user-friendly error message in case of any exceptions.": 0.15624999999999997, "Given a string `s`, find the length of the longest substring without repeating characters.": 0.15384615384615385, "Write a Python function that takes two numbers as input and returns their sum.": 0.15384615384615385, "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.15384615384615383, "Write a C++ function that takes a map as an input and returns the largest pair in the map, in 8 lines or fewer. A pair is considered larger if its second value is larger than another pair's second value.": 0.15217391304347827, "Using the comment as a guide, replace the \"TODO\" comment in the code with the proper code.": 0.14705882352941177, "write a code to get the current value of a Bitcoin in US dollars using the bitcoincharts API.": 0.14492753623188406}, "avg_similarity_score": 0.08620880196930611}
{"instruction": "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]", "input": "", "output": "Here is an example solution:\n\n```python\nimport math\nfrom typing import List\n\ndef generatePartitions(numberOfElements: int) -> List[List]:\n    partitions = [] # Initialize empty list of partitions\n    startIndexes = [index+1 for index in range(math.floor(numberOfElements / 2))] # Get indexes of elements to use in generating partitions\n    for startIndex in startIndexes:\n      partitions += recursiveGeneratePartition([startIndex], numberOfElements, startIndex) # Generate partitions recursively\n    return partitions\n\ndef recursiveGeneratePartition(currentSubset: List, totalNumberOfElements: int, lastElementAdded: int) -> List:\n    subsets = [] # Initialize empty list of subsets\n    if len(currentSubset) >= totalNumberOfElements: # Base Case: Subset already contains enough elements\n      subsets.append(currentSubset[:]) # Add copy of subset to list of subsets\n    else: # Recursive Step: Keep adding more elements to the subset\n      for element in range(lastElementAdded+1,totalNumberOfElements+1):\n          subsets += recursiveGeneratePartition(currentSubset + [element], totalNumberOfElements, element) # Call function again with updated subset\n    return subsets\n\nprint(generatePartitions(5))\n```\n\nLet us breakdown how the algorithm works:\n\nFirst, we declare an empty list of partitions. Next, we find the indices of the elements that we wish to use in our final partitions. Specifically, we choose the middle element of the desired partition plus the remaining elements on both sides of the middle element. So, for instance, if we wanted to split 5 into 3 parts, we would select the elements 2, 3, and 4.\n\nNext, we call the recursive function to generate the actual partitions. As mentioned earlier, the base case occurs when the size of the current subset reaches the target size. At this point, we append a copy of the current subset to the list of partitions. Otherwise, we keep calling the function recursively with additional elements appended onto the current subset.\n\nFinally, once the recursion terminates, we return the list of generated partitions.", "most_similar": {"Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.31746031746031744, "Write a Python function that takes two numbers as input and returns their sum.": 0.2807017543859649, "Write a Python function to reverse a given list of integers.": 0.2592592592592593, "Write a python function that sorts a list from large to small.": 0.2545454545454546, "Write a C++ function that takes a map as an input and returns the largest pair in the map, in 8 lines or fewer. A pair is considered larger if its second value is larger than another pair's second value.": 0.2380952380952381, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.23333333333333336, "The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\n\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\nGiven n, calculate F(n)": 0.22448979591836737, "Write a script to output the mean of a list of integers.": 0.21818181818181817, "Write a Python program that takes a list of numbers as input from the user, calculates the sum of all even numbers in the list, and returns the result. The program should check if the input is valid (i.e., if it's a list of numbers), and if it's not, it should return an error message. The program should also handle exceptions gracefully and return a user-friendly error message in case of any exceptions.": 0.21666666666666667, "Write a program to compute the sum of integers from k to n.": 0.21428571428571427}, "avg_similarity_score": 0.10766498933351276}
{"instruction": "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]", "input": "", "output": "Here is an example solution:\n\n```python\ndef convertBinary(decimalValue):\n    binaryArray = []\n    remainder = decimalValue%2\n    quotient = decimalValue//2\n    while True:\n         binaryArray.insert(0,remainder)\n         if quotient==0:break\n         remainder = quotient%2\n         quotient = quotient//2\n    return binaryArray\n\nconvertBinary(5)\n```\n\nLet us walkthrough the logic behind the algorithm:\n\nFirst, we initialize an empty array to store the binary representation of the input. Second, we compute the modulus of the input divided by 2 and assign it to the variable remainder. Third, we compute the floor division of the input divided by 2 and assign it to the variable quotient. Fourth, we insert the remainder into the beginning of the array. Fifth, we continue looping until the quotient is zero. Sixth, we compute the modulus of the quotient divided by 2 and assign it to the variable remainder. Seventh, we compute the floor division of the quotient divided by 2 and assign it to the variable quotient. Eighth, we go back to step five. Once the quotient is zero, we exit the loop and return the resulting array.", "most_similar": {"Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.5588235294117647, "Write a Python function that takes two numbers as input and returns their sum.": 0.41025641025641024, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.39999999999999997, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.3333333333333333, "Write a C++ function that takes a map as an input and returns the largest pair in the map, in 8 lines or fewer. A pair is considered larger if its second value is larger than another pair's second value.": 0.30303030303030304, "write a java function that implements gray code and returns the next sequence code after a given code in a given direction of rotation": 0.2857142857142857, "Write a Python function to reverse a given list of integers.": 0.2777777777777778, "write a c++ program that calculates the perimeter of a square": 0.2777777777777778, "Write a python function that sorts a list from large to small.": 0.2702702702702703, "Write a program to compute the sum of integers from k to n.": 0.2631578947368421}, "avg_similarity_score": 0.13908700203322966}
{"instruction": "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True", "input": "", "output": "Here is an example solution:\n\n```python\ndef isBalanceBrackets(string):\n    stack = []\n    for char in string:\n        if char == '(':\n           stack.append(char)\n        elif char == ')':\n             if len(stack)>0:\n               topChar = stack[-1]\n              if topChar != '(':\n                 return False\n              else:\n                 stack.pop(-1)\n             else:\n                 return False\n    if len(stack)!=0:\n        return False\n    return True\n\nprint(isBalanceBrackets(\"(()\"))\n```\n\nLet us walkthrough the logic behind the algorithm:\n\nFirst, we initialize an empty stack. Second, we iterate over the characters in the input string. If we encounter an opening parenthesis, we push it onto the stack. On the other hand, if we encounter a closing parenthesis, we pop off the most recently pushed item from the stack. If the popped item was not an opening parenthesis, we immediately terminate the execution of the function and return False. Lastly, if the stack still contains items left in it upon termination of the iteration, we return False. Otherwise, we return True.", "most_similar": {"Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.4, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.36000000000000004, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.3404255319148936, "Write a Python function that takes two numbers as input and returns their sum.": 0.3181818181818182, "Write a C++ function that takes a map as an input and returns the largest pair in the map, in 8 lines or fewer. A pair is considered larger if its second value is larger than another pair's second value.": 0.30985915492957744, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.30136986301369856, "write a java function that implements gray code and returns the next sequence code after a given code in a given direction of rotation": 0.2962962962962963, "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.2456140350877193, "Write a Python function to reverse a given list of integers.": 0.2439024390243902, "Write a python function that sorts a list from large to small.": 0.23809523809523808}, "avg_similarity_score": 0.1397313719017387}
{"instruction": "What is the difference between a pointer variable and a reference variable in Java?", "input": "", "output": "A pointer variable holds the memory location of some data while a reference variable refers to some data directly without holding its own copy. In short, a pointer variable holds the address of some data while a reference variable holds the actual data.\n\nFor instance, consider the following piece of code:\n\nclass TestClass {\n public:\n\tTestClass(String name) {\n\t\tSystem.out.println(\"\\n\\nObject created...\");\n\t\tthis.name = name;\n\t}\n\tprivate String name;\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n}\n\npublic class PointerReferenceDemo {\n\tpublic static void main(String[] args) {\n\t\tTestClass tObj = new TestClass(\"Java\");\n\t\tTestClass refVar = tObj;\n\t\trefVar.setName(\"C++\");\n\t\tSystem.out.println(\"Value of tObj.getName(): \"+tObj.getName());\n\t\tSystem.out.println(\"Value of refVar.getName(): \"+refVar.getName());\n\t}\n}\nWhen the above code is executed, it produces the following result:\n\nObject created...\nValue of tObj.getName(): C++\nValue of refVar.getName(): C++\nAs shown in the above example, both variables refer to the same object. So, whenever there is a change made to the referenced object via one variable, the changes become visible to all the references pointing to the same object.\n\nOn the contrary, let us see what happens when we try to achieve the same thing using pointers instead of references:\n\nclass TestClass {\n public:\n\tTestClass(String name) {\n\t\tSystem.out.println(\"\\n\\nObject created...\");\n\t\tthis.name = name;\n\t}\n\tprivate String name;\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n}\n\npublic class PointerReferenceDemo {\n\tpublic static void main(String[] args) {\n\t\tTestClass tObj = new TestClass(\"Java\");\n\t\tTestClass* ptrVar = &tObj;\n\t\tptrVar->setName(\"C++\");\n\t\tSystem.out.println(\"Value of tObj.getName(): \"+tObj.getName());\n\t\tSystem.out.println(\"Value of ptrVar.getName(): \"+(*ptrVar).getName());\n\t}\n}\nWhen the above code is compiled and run, it throws NullPointerException. Let us understand why this exception occurs.\n\nAt first, the constructor of the TestClass object is called to allocate space for the object in heap memory. Next, the address of the newly allocated object is assigned to the pointer variable ptrVar. Finally, the setter method of the TestClass object is invoked to update the value of the private field named name. However, since the pointer variable ptrVar doesn't hold the address of the object but rather just the address of the pointer variable tObj, the setter method fails to find the target object and hence throws NullPointerException.\n\nTherefore, it is clear that although both the pointer variable and the reference variable seem similar, they differ significantly in their behavior. While a pointer variable holds the address of some data, a reference variable refers to some data directly without holding its own copy.", "most_similar": {"Translate the following code from python in Java.": 0.2727272727272727, "How do I get the power of a number in python?": 0.23999999999999996, "What is Kubernetes ?": 0.23529411764705882, "How do you output all the contents of a list in Python?": 0.23076923076923075, "Implement a Java method to reverse a string without using any built-in functions.": 0.21428571428571427, "write a java function that implements gray code and returns the next sequence code after a given code in a given direction of rotation": 0.2105263157894737, "write a sum function in asm": 0.2, "Using the comment as a guide, replace the \"TODO\" comment in the code with the proper code.": 0.1935483870967742, "write a code to get the current value of a Bitcoin in US dollars using the bitcoincharts API.": 0.1875, "Create a calculator in the Python programming language": 0.18181818181818182}, "avg_similarity_score": 0.11339017349213858}
{"instruction": "Write a function that reverses a string. The input string is given as an array of characters s.", "input": "", "output": "Here is an example solution:\n\n```cpp\nvector<char> reverseString(vector<char>& s) {\n    vector<char>::iterator begin = s.begin(), end = s.end() - 1;\n    while (begin < end) {\n      swap(*begin++, *end--);\n    }\n    return s;\n}\n```\n\nWe define iterators begin and end to mark the beginning and ending positions of the string respectively. We keep swapping elements until begin reaches the middle of the string. At this stage, begin and end meet and stop swapping.", "most_similar": {"Write a Python function to reverse a given list of integers.": 0.41379310344827586, "write a c++ program that calculates the perimeter of a square": 0.3448275862068966, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.34285714285714286, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.33333333333333337, "Write a python function that sorts a list from large to small.": 0.33333333333333337, "write a java function that implements gray code and returns the next sequence code after a given code in a given direction of rotation": 0.3333333333333333, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.32558139534883723, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.3157894736842105, "Given a string `s`, find the length of the longest substring without repeating characters.": 0.31250000000000006, "Write a Python function that takes two numbers as input and returns their sum.": 0.31250000000000006}, "avg_similarity_score": 0.16031378254361608}
{"instruction": "Write a function that finds the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".", "input": "", "output": "Here is an example solution:\n\n```python\ndef longestCommonPrefix(self, strs):\n    \"\"\"\n    :type strs: List[str]\n    :rtype: str\n    \"\"\"\n    if not strs:\n        return \"\"\n        \n    minLen = float('inf')\n    for s in strs:\n        minLen = min(minLen,len(s))\n         \n    for i in range(minLen):\n        ch = strs[0][i]\n        for j in range(1,len(strs)):\n            if strs[j][i] != ch:\n                return strs[0][:i]\n    return strs[0][:minLen]\n```\n\nLet us walkthrough the logic behind the algorithm:\n\nFirst, we check if the input array is empty. If yes, we simply return an empty string.\nNext, we calculate the minimum length among all the strings present in the array.\nFinally, we compare the characters at the current index of each string against the previous ones. As soon as we detect a mismatch, we return the substring formed till now.", "most_similar": {"Write a function that reverses a string. The input string is given as an array of characters s.": 0.41860465116279066, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.28571428571428564, "write a c++ program that calculates the perimeter of a square": 0.2777777777777778, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.2545454545454545, "write a java function that implements gray code and returns the next sequence code after a given code in a given direction of rotation": 0.24489795918367346, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.24, "Implement a function that accepts a string containing digits from 2-9 with various lengths. The function should replace every digit with the word equivalent of that digit (e.g., 2 becomes \u2018two\u2019, 3 becomes \u2018three\u2019, \u2026 , 9 becomes \u2018nine\u2019). There is no need to validate the contents of the input string.": 0.2368421052631579, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.22222222222222224, "Write a Python function to reverse a given list of integers.": 0.2222222222222222, "Could you please write me Rust code that takes ownership of an array of integers and sorts them in ascending order?": 0.21739130434782608}, "avg_similarity_score": 0.1275296217250447}
{"instruction": "Write a function that checks if a binary tree is symmetric around its center.", "input": "", "output": "Here is an example solution:\n\n```python\ndef isSymmetric(root):\n    def helper(left,right):\n        if left==None and right==None:\n            return True\n        if left==None or right==None:\n            return False\n        if left.val!=right.val:\n            return False\n        return helper(left.left,right.right) and helper(left.right,right.left)\n    return helper(root.left, root.right)\n```\n\nLet us walkthrough the logic behind the algorithm:\n\nFirst, we write a recursive helper function that compares the nodes of the left subtree with the nodes of the right subtree. To make things easier, we assume that the node values are integers.\nThen, we call the helper function passing the roots of the left and right subtrees.", "most_similar": {"Write a python function that sorts a list from large to small.": 0.3846153846153846, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.375, "write a c++ program that calculates the perimeter of a square": 0.32, "Write a Python function to reverse a given list of integers.": 0.32, "Write a function that finds the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".": 0.30769230769230765, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.30769230769230765, "write a sum function in asm": 0.3, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.2941176470588235, "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.29268292682926833, "Write a Python function that takes two numbers as input and returns their sum.": 0.2857142857142857}, "avg_similarity_score": 0.13259273316179096}
{"instruction": "Write a function that calculates the sum of all odd fibonacci numbers below n.", "input": "", "output": "Here is an example solution:\n\n```python\ndef sumOfOddNumbersBelowNthFibonacciNumber(n):\n    arr=[0]*(n+1)\n    arr[0]=arr[1]=1\n    for i in range(2,n+1):\n        arr[i]+=(arr[i-1])+(arr[i-2])\n    res=sum([ele for ele in arr[:n] if ele%2!=0])\n    return res\n```\n\nLet us walkthrough the logic behind the algorithm:\n\nFirst, we declare an array of size n+1 and assign the initial values of the first two terms of the series to the indices 0 and 1 respectively.\nNow, we traverse the remaining indices starting from 2 and add the last two terms together to form the next term.\nLastly, we take the sum of all even indexed terms in the array.", "most_similar": {"write a c++ program that calculates the perimeter of a square": 0.4799999999999999, "Write a program to compute the sum of integers from k to n.": 0.4444444444444445, "Write a Python function to find all prime numbers up to the given number n.": 0.4137931034482759, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.3870967741935484, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.375, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.358974358974359, "Write a Python function that takes two numbers as input and returns their sum.": 0.35714285714285715, "Write a Python function to reverse a given list of integers.": 0.32, "write a java function that implements gray code and returns the next sequence code after a given code in a given direction of rotation": 0.3157894736842105, "Write a python function that sorts a list from large to small.": 0.30769230769230765}, "avg_similarity_score": 0.16548529336121703}
{"instruction": "Write a function that computes the greatest common divisor of two positive integer numbers. Use Euclid's Algorithm.", "input": "", "output": "Here is an example solution:\n\n```python\ndef gcd(m,n):\n    while m % n > 0:\n        temp = m\n        m = n\n        n = temp % n\n    return n\n```\n\nLet us walkthrough the logic behind the algorithm:\n\nEuclid's Algorithm states that the GCD of two numbers is equal to the GCD of the remainder obtained after dividing them by their smaller number. Therefore, we repeatedly divide the larger number by the smaller number until the quotient is zero. Once the quotient is zero, the smaller number is our answer.", "most_similar": {"Write a function that calculates the sum of all odd fibonacci numbers below n.": 0.43750000000000006, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.3888888888888889, "Write a Python function that takes two numbers as input and returns their sum.": 0.375, "write a c++ program that calculates the perimeter of a square": 0.3448275862068966, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.32558139534883723, "Write a function that finds the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".": 0.32558139534883723, "Write me a function in C++ to find the distance between two points": 0.3225806451612903, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.28571428571428575, "write a java function that implements gray code and returns the next sequence code after a given code in a given direction of rotation": 0.28571428571428575, "Write a Python function to reverse a given list of integers.": 0.27586206896551724}, "avg_similarity_score": 0.1469322682005941}
{"instruction": "Write a function that counts the total number of prime numbers up to N.", "input": "", "output": "Here is an example solution:\n\n```python\ndef countPrimes(n):\n    primes = [True] * n\n    primes[0],primes[1] = False,False\n    for i in range(2,int((n/2)+1)):\n        if primes[i]:\n            for j in range(i*2,(n),i):\n                primes[j] = False\n    return sum(primes)-2\n```\n\nLet us walkthrough the logic behind the algorithm:\n\nFirst, we initialize an array of booleans where each index represents a number. Initially, we set all entries to True except for the first two entries.\nNext, we iterate over the array and identify all composite numbers. Since we know that all non-prime numbers are multiples of prime numbers, we can skip checking all numbers that are multiples of previously identified prime numbers.\nOnce we finish identifying all composite numbers, we return the sum of all entries in the array minus 2. Note that we subtract 2 because initially we marked the first two entries as False.", "most_similar": {"Write a function that calculates the sum of all odd fibonacci numbers below n.": 0.5714285714285714, "Write a Python function to find all prime numbers up to the given number n.": 0.5517241379310344, "Write a program to compute the sum of integers from k to n.": 0.4444444444444445, "Write a function that computes the greatest common divisor of two positive integer numbers. Use Euclid's Algorithm.": 0.43750000000000006, "write a c++ program that calculates the perimeter of a square": 0.4, "Write a python function that sorts a list from large to small.": 0.3846153846153846, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.375, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.358974358974359, "Write a Python function that takes two numbers as input and returns their sum.": 0.35714285714285715, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.3529411764705882}, "avg_similarity_score": 0.183596076786091}
{"instruction": "Write a function that determines whether a triangle is equilateral, isosceles, scalene based on three side lengths provided.", "input": "", "output": "Here is an example solution:\n\n```python\ndef determineTriangleType(sideLengthOne, sideLengthTwo, sideLengthThree):\n    sides = sorted([sideLengthOne, sideLengthTwo, sideLengthThree])\n    if sides[0] >= sides[1] + sides[2]:\n        raise ValueError(\"Invalid Triangle\")\n    if sides[0] == sides[1] == sides[2]:\n        return \"equilateral\"\n    if sides[0] == sides[1] or sides[1] == sides[2] or sides[0] == sides[2]:\n        return \"isosceles\"\n    return \"scalene\"\n```\n\nLet us walkthrough the logic behind the algorithm:\n\nFirst, we sort the three side lengths in ascending order.\nSecond, we verify that none of the side lengths exceed the sum of the other two side lengths. If this condition is satisfied, we throw a ValueError indicating invalid triangle.\nThird, we check if all the side lengths are equal. If this condition is satisfied, we return \u201cequilateral\u201d.\nOtherwise, we check if exactly two side lengths are equal. If this condition is satisfied, we return \u201cisosceles\u201d otherwise we return \u201cscalene\u201d.", "most_similar": {"Write a function that checks if a binary tree is symmetric around its center.": 0.375, "Write a python function that sorts a list from large to small.": 0.33333333333333337, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.3333333333333333, "write a c++ program that calculates the perimeter of a square": 0.27586206896551724, "Write a Python function to reverse a given list of integers.": 0.27586206896551724, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.2631578947368421, "Write a function that counts the total number of prime numbers up to N.": 0.25, "Write a function that calculates the sum of all odd fibonacci numbers below n.": 0.25, "Write a Python function that takes two numbers as input and returns their sum.": 0.25, "write a sum function in asm": 0.25}, "avg_similarity_score": 0.11998219747419492}
{"instruction": "Write a function that removes duplicate words from a string. All whitespace characters must separate the words.", "input": "", "output": "Here is an example solution:\n\n```python\ndef removeDuplicateWords(text):\n    textArr = text.lower().strip().replace('.','').split()\n    uniqueTextArr = []\n    for word in textArr:\n        if word not in uniqueTextArr:\n            uniqueTextArr.append(word)\n    return (' '.join(uniqueTextArr)).capitalize()\n```\n\nLet us walkthrough the logic behind the algorithm:\n\nFirst, we split the input string into individual words and strip out punctuation marks.\nNext, we iterate over the resulting array and append each word to a temporary array if it isn't already present in the temporary array.\nFinally, we join the words back into a string separated by spaces and capitalize the first letter.", "most_similar": {"Write a function that reverses a string. The input string is given as an array of characters s.": 0.39999999999999997, "Write a python function that sorts a list from large to small.": 0.3448275862068966, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.3243243243243243, "Write a function that counts the total number of prime numbers up to N.": 0.3225806451612903, "Write a function that calculates the sum of all odd fibonacci numbers below n.": 0.3225806451612903, "Write a function that checks if a binary tree is symmetric around its center.": 0.3225806451612903, "Write a Python function to find all prime numbers up to the given number n.": 0.3125, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.2978723404255319, "Write a function that determines whether a triangle is equilateral, isosceles, scalene based on three side lengths provided.": 0.28571428571428575, "Write a function that computes the greatest common divisor of two positive integer numbers. Use Euclid's Algorithm.": 0.28571428571428575}, "avg_similarity_score": 0.1538466677914246}
{"instruction": "Write a function that returns the maximum profit earned from buying and selling stocks on a particular day.\n\nYou are given an array prices where prices[i] is the price of a given stock on the ith day. Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).", "input": "", "output": "Here is an example solution:\n\n```python\ndef maxProfit(prices):\n    maxprofit = 0\n    for i in range(len(prices)):\n        for j in range(i+1,len(prices)):\n            diff = prices[j] - prices[i]\n            if diff > maxprofit:\n                maxprofit = diff\n    return maxprofit\n```\n\nLet us walkthrough the logic behind the algorithm:\n\nFirst, we initialize a variable maxprofit to track the maximum profit achieved so far.\nNext, we iterate over the entire array twice. First, we iterate over the outer loop from 0 to n-1. Inside the inner loop, we iterate over the second half of the array from i+1 to n-1.\nWithin these loops, we calculate the difference between the current pair of consecutive days and update the maxprofit accordingly.\nAfter exiting the nested loops, we return the maximum profit.", "most_similar": {"Given an array of integers `nums` and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.": 0.20289855072463767, "write a java function that implements gray code and returns the next sequence code after a given code in a given direction of rotation": 0.1981981981981982, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.17142857142857143, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.17094017094017092, "Write a Python program that takes a list of numbers as input from the user, calculates the sum of all even numbers in the list, and returns the result. The program should check if the input is valid (i.e., if it's a list of numbers), and if it's not, it should return an error message. The program should also handle exceptions gracefully and return a user-friendly error message in case of any exceptions.": 0.1585365853658537, "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.15789473684210528, "Write a C++ function that takes a map as an input and returns the largest pair in the map, in 8 lines or fewer. A pair is considered larger if its second value is larger than another pair's second value.": 0.15625, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.15384615384615385, "Write a function that removes duplicate words from a string. All whitespace characters must separate the words.": 0.15384615384615385, "Write a function that finds the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".": 0.14285714285714285}, "avg_similarity_score": 0.08678604176579306}
{"instruction": "Given a non-empty array of integers, write a function that returns the minimum difference between the largest and smallest values in the array.\n\nFor example, given \\[3, 10, 5\\], the function should return 7 since the largest value is 10 and the smallest is 3. But given \\[10, 3, 5\\], the function should return 2 since the largest value is 10 and the smallest is 5.", "input": "", "output": "The following JavaScript snippet solves the problem:\n\n```js\nconst minDiff = arr => Math.max(...arr)-Math.min(...arr);\nconsole.log(minDiff([3, 10, 5])) // Output: 7\nconsole.log(minDiff([10, 3, 5])) // Output: 2\n```\n\nIn the above code, the spread syntax \\(...\\) allows us to pass arrays directly to functions without having to convert them to arguments using apply. In addition, the rest parameter \\.\\.\\.\\. is used to collect multiple parameters passed to a function into an array. This makes it easy to compute the maximum and minimum values in the array.", "most_similar": {"Write a Python program that takes a list of numbers as input from the user, calculates the sum of all even numbers in the list, and returns the result. The program should check if the input is valid (i.e., if it's a list of numbers), and if it's not, it should return an error message. The program should also handle exceptions gracefully and return a user-friendly error message in case of any exceptions.": 0.22222222222222224, "Write a C++ function that takes a map as an input and returns the largest pair in the map, in 8 lines or fewer. A pair is considered larger if its second value is larger than another pair's second value.": 0.2222222222222222, "Write a function that returns the maximum profit earned from buying and selling stocks on a particular day.\n\nYou are given an array prices where prices[i] is the price of a given stock on the ith day. Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).": 0.19480519480519484, "Given an array of integers `nums` and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.": 0.18644067796610167, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.18556701030927836, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.1839080459770115, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.18181818181818182, "write a java function that implements gray code and returns the next sequence code after a given code in a given direction of rotation": 0.1758241758241758, "Write a function that finds the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".": 0.17391304347826086, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.17391304347826086}, "avg_similarity_score": 0.09447356626793622}
{"instruction": "Alice has some coins and Bob wants to give Alice money. Write a program which takes as input the amount of money Alice needs and outputs the least number of coins needed to pay Alice. Assume there are infinite supply of coins.", "input": "", "output": "```python\nimport math\n\ndef coinChange(amount, denoms=[1, 5, 10, 25, 50]):\n    \"\"\"Returns the fewest number of coins required to change the amount.\"\"\"\n    numCoins = float('inf')\n    for d in denoms:\n        while amount >= d:\n            amount -= d\n            numCoins = min(numCoins, 1+math.floor(float(amount)/d))\n    return numCoins\n```", "most_similar": {"Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.2388059701492537, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.22580645161290322, "Write a program to compute the sum of integers from k to n.": 0.21818181818181817, "Write a function that counts the total number of prime numbers up to N.": 0.21428571428571427, "Write a Python function that takes two numbers as input and returns their sum.": 0.21428571428571427, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.21176470588235297, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.20338983050847456, "Write a Python program that takes a list of numbers as input from the user, calculates the sum of all even numbers in the list, and returns the result. The program should check if the input is valid (i.e., if it's a list of numbers), and if it's not, it should return an error message. The program should also handle exceptions gracefully and return a user-friendly error message in case of any exceptions.": 0.20168067226890757, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.19444444444444445, "write a c++ program that calculates the perimeter of a square": 0.18867924528301885}, "avg_similarity_score": 0.1017367030195241}
{"instruction": "Implement a method that accepts a positive integer and returns its corresponding Roman numeral.", "input": "", "output": "```java\npublic static String romanNumerals(long arabicNumber){\n   StringBuilder sb = new StringBuilder();\n   Map<Integer, Character> map = new HashMap<>();\n   map.put(1,'I');map.put(5,'V');map.put(10,'X');map.put(50,'L');map.put(100,'C');map.put(500,'D');map.put(1000,'M');\n   Set<Map.Entry<Integer,Character>> entries = map.entrySet();\n   Iterator<Map.Entry<Integer,Character>> iterator = entries.iterator();\n   boolean flag = false;\n   while(arabicNumber!=0 && iterator.hasNext()) {\n       Map.Entry entry = iterator.next();\n       Integer key = (Integer) entry.getKey();\n       char val = ((Character) entry.getValue());\n       if(!flag&&key<=arabicNumber) {\n           sb.append(val);\n           arabicNumber -= key;\n       }else if((!flag||key==arabicNumber)&&key>=arabicNumber) {\n          sb.insert(sb.lastIndexOf(val), 'V'.equals(val)?'IV':(key%5==0?'IX':'X'));\n          break;\n      }else if(flag&&key<=arabicNumber) {\n             sb.deleteCharAt(sb.indexOf(val));\n              sb.setCharAt(sb.indexOf(val)+1,(char)(val+'M'-'C'+1));\n               arabicNumber -= key;\n               flag = true;\n      }\n   }\n   return sb.toString();\n}\n```", "most_similar": {"Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.2941176470588235, "Implement a Java method to reverse a string without using any built-in functions.": 0.2857142857142857, "Write a function that checks if a binary tree is symmetric around its center.": 0.2857142857142857, "Write a Python function that takes two numbers as input and returns their sum.": 0.2857142857142857, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.2580645161290323, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.25641025641025644, "Write a function that computes the greatest common divisor of two positive integer numbers. Use Euclid's Algorithm.": 0.25, "write a c++ program that calculates the perimeter of a square": 0.23999999999999996, "Write a python function that sorts a list from large to small.": 0.23076923076923075, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.22727272727272724}, "avg_similarity_score": 0.10317562916480194}
{"instruction": "Create a function that converts a name into initials. Given a name, the function should return the first letter of every word capitalized.", "input": "", "output": "```javascript\nfunction abbrevName(name) {\n  var result = \"\";\n  const names = name.toUpperCase().trim().replace(/ /g,\"\").match(/.{1}/gi);\n  for (let i = 0; i < names.length; ++i) {\n    result+=names[i];\n  };\n  return result;\n};\nabbrevName(\"Sam Harris\");//SH\nabbrevName(\"pPPpPppppp\");//PP\nabbrevName(\"\");//\"\"\n```", "most_similar": {"Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.3, "write a java function that implements gray code and returns the next sequence code after a given code in a given direction of rotation": 0.2978723404255319, "Write a Python function to reverse a given list of integers.": 0.29411764705882354, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.2926829268292683, "Write a function that counts the total number of prime numbers up to N.": 0.27027027027027023, "Write a function that calculates the sum of all odd fibonacci numbers below n.": 0.27027027027027023, "Given the `root` of a binary tree, return the inorder traversal of its nodes' values.": 0.26315789473684204, "Write a function that removes duplicate words from a string. All whitespace characters must separate the words.": 0.25, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.24999999999999994, "Write a function that computes the greatest common divisor of two positive integer numbers. Use Euclid's Algorithm.": 0.24390243902439024}, "avg_similarity_score": 0.1352603459951307}
{"instruction": "Write a function that reverses a string. The input string is given as an array of characters char[]. Do not allocate extra space for another array, you must do this by modifying the input array itself. You may assume all the characters consist of printable ascii characters.", "input": "", "output": "```c++\nvector<char>& ReverseString(vector<char>& s) {\n    reverse(begin(s), end(s));\n    return s;\n}\n```", "most_similar": {"Write a function that reverses a string. The input string is given as an array of characters s.": 0.5230769230769231, "Write a function that removes duplicate words from a string. All whitespace characters must separate the words.": 0.28125, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.2597402597402597, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.25, "Write a function that finds the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".": 0.24999999999999994, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.24999999999999994, "Write a function that calculates the sum of all odd fibonacci numbers below n.": 0.22950819672131148, "Create a function that converts a name into initials. Given a name, the function should return the first letter of every word capitalized.": 0.22857142857142854, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.22222222222222224, "Write a function that returns the maximum profit earned from buying and selling stocks on a particular day.\n\nYou are given an array prices where prices[i] is the price of a given stock on the ith day. Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).\n\nNote: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).": 0.208955223880597}, "avg_similarity_score": 0.12343827490268472}
{"instruction": "Write a function that removes duplicates from an unsorted linked list. Follow up: How would you solve this problem if a temporary buffer is not allowed?", "input": "", "output": "```cpp\nstruct ListNode {\n    int val;\n    struct ListNode * next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nstatic void deleteDuplicates(ListNode ** headRef) {\n    auto curr = (*headRef)->next;\n    auto prev = *headRef;\n    bool found = false;\n    while (curr != NULL) {\n        if (!found || curr->val != prev->val) {\n            prev->next = curr;\n            prev = curr;\n            curr = curr->next;\n            found = false;\n        } else {\n            prev->next = curr->next;\n            free(curr);\n            curr = prev->next;\n            found = true;\n        }\n    }\n}\n```", "most_similar": {"Write a function that checks if a binary tree is symmetric around its center.": 0.35000000000000003, "Write a function that removes duplicate words from a string. All whitespace characters must separate the words.": 0.3255813953488372, "Write a function that finds the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".": 0.27450980392156865, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.27272727272727276, "Write a function that determines whether a triangle is equilateral, isosceles, scalene based on three side lengths provided.": 0.27272727272727276, "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.2641509433962264, "Write a python function that sorts a list from large to small.": 0.2631578947368421, "Write a function that counts the total number of prime numbers up to N.": 0.25, "Write Python code to solve this leetcode problem.": 0.23529411764705882, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.2173913043478261}, "avg_similarity_score": 0.12412311334669597}
{"instruction": "Write a function that takes a string as input and returns the string reversed. Example: Given s = \"hello\", return \"olleh\".", "input": "", "output": "```python\ndef reverseString(s):\n    return s[::-1]\n```", "most_similar": {"Write a Python function that takes two numbers as input and returns their sum.": 0.5294117647058824, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.5263157894736842, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.5, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.48888888888888893, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.48, "Write a C++ function that takes a map as an input and returns the largest pair in the map, in 8 lines or fewer. A pair is considered larger if its second value is larger than another pair's second value.": 0.39344262295081966, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.37837837837837834, "Write a function that removes duplicate words from a string. All whitespace characters must separate the words.": 0.37837837837837834, "write a java function that implements gray code and returns the next sequence code after a given code in a given direction of rotation": 0.3636363636363636, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.34920634920634924}, "avg_similarity_score": 0.1751423979693773}
{"instruction": "What does the following piece of code print out?\n```js\nvar arr = ['hello', 'world'];\narr['foo'] = 'bar';\nconsole.log(JSON.stringify(arr));\n```", "input": "", "output": "When executed, the above JavaScript program prints `[ \"hello\", \"world\" ]`, since the assignment statement `arr['foo']='bar'` creates a property named `'foo'` whose value is `'bar'`. However, note that arrays in JavaScript are actually objects underneath, so assigning properties directly to an array works just fine.\n\nFor more information about how arrays work in JavaScript, see our article on [arrays](https://www.freecodecamp.org/news/javascript-arrays/).", "most_similar": {"Translate the following code from python in Java.": 0.19999999999999998, "Suggest a completion for the following python code.": 0.19999999999999998, "Find the bug in the following code piece:\n\na = 1\nwhile a == 1:\n  b = input(\"what's your name ?\")\nprint(\"Hi \",b, \" this is infinity loop !\")": 0.16666666666666669, "Write a simple C# program that prints \"Hello, World!\".": 0.1290322580645161, "Write a script to output 'Hello World' in python": 0.1290322580645161, "Write a simple C++ program that prints \"Hello, World!\".": 0.1290322580645161, "What does this Python code do?\n```\nimport random\n\n\ndef montecarloPi(calcs):\n    hits = 0\n\n    for i in range(calcs):\n        x = random.random()\n        y = random.random()\n        if (x**2 + y**2) < 1:\n            hits = hits + 1\n\n    return 4.0 * hits / calcs\n\n\nprint(montecarloPi(10000))\n```": 0.12698412698412698, "Generate a correct python program to fulfill the following purpose:": 0.12500000000000003, "Solve the following equation system. Give me the final answer.": 0.12500000000000003, "How do I get the power of a number in python?": 0.12121212121212123}, "avg_similarity_score": 0.06314170337096124}
{"instruction": "Given a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters. If there are multiple substrings with equal lengths, return the leftmost one.", "input": "", "output": "We can solve this problem using sliding window technique. We maintain a hashmap to keep track of visited character indices. Whenever we encounter a repeated character, we shrink the window size till the last occurrence of the current character. At every step, we update the maximum length variable accordingly. Here\u2019s the pseudocode:\n\n```py\nmaxLength = 0\nstart = end = 0\nhashmap = {}\nwhile end < len(string):\n    if string[end] in hashmap:\n        start = max(start, hashmap[string[end]] + 1)\n    else:\n        maxLength = max(maxLength, end - start + 1)\n    hashmap[string[end]] = end\n    end+=1\nreturn maxLength\n```\n\nTime complexity : O(n).\nSpace Complexity : O(min(n, k)), where \u2018k\u2019 is the number of distinct characters present in the string.", "most_similar": {"Given a string `s`, find the length of the longest substring without repeating characters.": 0.6222222222222222, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.32786885245901637, "Given the `root` of a binary tree, return the inorder traversal of its nodes' values.": 0.21739130434782605, "Write a function that finds the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".": 0.21428571428571427, "Given an integer array nums, find the subarray with the largest sum, and return its sum.": 0.2127659574468085, "Using the comment as a guide, replace the \"TODO\" comment in the code with the proper code.": 0.20833333333333331, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.20408163265306123, "Identify the pos tag of the word in the given sentence.": 0.19047619047619047, "Create a function that converts a name into initials. Given a name, the function should return the first letter of every word capitalized.": 0.18518518518518517, "Replace the <mask> token in the text with proper words that are consistent with the context. You can use multiple words for each <mask> token.": 0.17857142857142855}, "avg_similarity_score": 0.10340609478269205}
{"instruction": "You are given a binary tree in which each node contains an integer value. Find the largest value in each row of the tree.\n\nExample:\nInput:\n\n        1\n     /     \\\n    3       2\nOutput: [1, 3, 2]\nExplanation:\nRow 1: 1 is the largest integer in the row.\nRow 2: 3 is the largest integer in the row.\nRow 3: 2 is the largest integer in the row.", "input": "", "output": "```cpp\nvector<int> largestValues(TreeNode* root) {\n    vector<int> res;\n    queue<pair<TreeNode*, int>> q;\n    TreeNode* cur;\n    pair<TreeNode*, int> p;\n    int levelSize;\n    if(root != NULL)\n        q.push({root, 1});\n    while(!q.empty())\n    {\n        p = q.front(), q.pop();\n        cur = p.first;\n        levelSize = p.second;\n        if(res.size() >= levelSize)\n            res[levelSize-1]=max(cur->val, res[levelSize-1]);\n        else\n            res.push_back(cur->val);\n        if(cur->left != NULL)\n            q.push({cur->left, levelSize+1});\n        if(cur->right != NULL)\n            q.push({cur->right, levelSize+1});\n    }\n    return res;\n}\n```", "most_similar": {"Given a non-empty array of integers, write a function that returns the minimum difference between the largest and smallest values in the array.\n\nFor example, given \\[3, 10, 5\\], the function should return 7 since the largest value is 10 and the smallest is 3. But given \\[10, 3, 5\\], the function should return 2 since the largest value is 10 and the smallest is 5.": 0.2595419847328244, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.20224719101123595, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.1869158878504673, "Given an integer array nums, find the subarray with the largest sum, and return its sum.": 0.175, "Write a C++ function that takes a map as an input and returns the largest pair in the map, in 8 lines or fewer. A pair is considered larger if its second value is larger than another pair's second value.": 0.17142857142857143, "The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\n\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\nGiven n, calculate F(n)": 0.16806722689075632, "Can you provide a shell script that displays the total number of lines in all '*.txt' files in the current directory?": 0.16470588235294117, "Implement a function that accepts a string containing digits from 2-9 with various lengths. The function should replace every digit with the word equivalent of that digit (e.g., 2 becomes \u2018two\u2019, 3 becomes \u2018three\u2019, \u2026 , 9 becomes \u2018nine\u2019). There is no need to validate the contents of the input string.": 0.15652173913043477, "Given an array of integers `nums` and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.": 0.15652173913043477, "Write a Python program that takes a list of numbers as input from the user, calculates the sum of all even numbers in the list, and returns the result. The program should check if the input is valid (i.e., if it's a list of numbers), and if it's not, it should return an error message. The program should also handle exceptions gracefully and return a user-friendly error message in case of any exceptions.": 0.15602836879432624}, "avg_similarity_score": 0.08283623123605557}
{"instruction": "Alice wants to buy a keyboard and a USB drive from her favorite online store. She goes to the item page and sees the prices are $14.99 and $39.99 respectively. Alice has exactly $80 dollars in her wallet. What is the minimum amount she needs to spend in order to purchase both items together? Assume that Alice doesn't need to pay shipping costs.", "input": "", "output": "Since Alice has $80 dollars in her wallet, she must spend no more than $80 dollars. Therefore, she can either spend $14.99 on the keyboard alone or $39.99 on the USB drive alone. In addition, she can spend $54.99 on both products. Thus, the answer is $54.99.", "most_similar": {"Alice has some coins and Bob wants to give Alice money. Write a program which takes as input the amount of money Alice needs and outputs the least number of coins needed to pay Alice. Assume there are infinite supply of coins.": 0.16666666666666663, "Implement a function that accepts a string containing digits from 2-9 with various lengths. The function should replace every digit with the word equivalent of that digit (e.g., 2 becomes \u2018two\u2019, 3 becomes \u2018three\u2019, \u2026 , 9 becomes \u2018nine\u2019). There is no need to validate the contents of the input string.": 0.13675213675213677, "Write a C++ function that takes a map as an input and returns the largest pair in the map, in 8 lines or fewer. A pair is considered larger if its second value is larger than another pair's second value.": 0.13084112149532712, "Write a Python program that takes a list of numbers as input from the user, calculates the sum of all even numbers in the list, and returns the result. The program should check if the input is valid (i.e., if it's a list of numbers), and if it's not, it should return an error message. The program should also handle exceptions gracefully and return a user-friendly error message in case of any exceptions.": 0.1258741258741259, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.12500000000000003, "Given a non-empty array of integers, write a function that returns the minimum difference between the largest and smallest values in the array.\n\nFor example, given \\[3, 10, 5\\], the function should return 7 since the largest value is 10 and the smallest is 3. But given \\[10, 3, 5\\], the function should return 2 since the largest value is 10 and the smallest is 5.": 0.12030075187969924, "Given an array of integers `nums` and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.": 0.11965811965811966, "write a code to get the current value of a Bitcoin in US dollars using the bitcoincharts API.": 0.11904761904761905, "Please write a Rust function that takes a u64 input and returns the largest prime number less than that value.": 0.11627906976744187, "Write me a python script, which reads data from a json file and saves the data in an appropriate data structure.": 0.11494252873563218}, "avg_similarity_score": 0.07375782330182085}
{"instruction": "Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitions of s.\n\nAn empty string is also considered valid.\n\nExample 1:\nInput: s = \"aab\"\nOutput: [[\"aa\",\"b\"],[\"a\",\"a\",\"b\"]]\n\nExample 2:\nInput: s = \"a\"\nOutput: [[\"a\"]]", "input": "", "output": "```py\nfrom typing import List\nimport collections\nclass Solution:\n    def partition(self, s: str) -> List[List[str]]:\n        result = []\n        def backtracking(S, path):\n            if S == '':\n                result.append([item for item in path])\n            for i in range(len(S)):\n                if self.isPalindromic(S[:i+1]):\n                    path.append(S[:i+1])\n                    backtracking(S[i+1:], path)\n                    path.pop(-1)\n        backtracking(s,[])\n        return result\n    def isPalindromic(self, s):\n        stack = collections.deque()\n        for i in range(len(s)):\n            stack.append(s[-i-1])\n        return ''.join(stack) == s\n```", "most_similar": {"Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.23076923076923075, "Write a function that finds the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".": 0.2191780821917808, "Write a function that takes a string as input and returns the string reversed. Example: Given s = \"hello\", return \"olleh\".": 0.20588235294117646, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.1978021978021978, "Given a string `s`, find the length of the longest substring without repeating characters.": 0.19354838709677416, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.1917808219178082, "Find the bug in the following code piece:\n\na = 1\nwhile a == 1:\n  b = input(\"what's your name ?\")\nprint(\"Hi \",b, \" this is infinity loop !\")": 0.1891891891891892, "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.18666666666666668, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.18181818181818182, "Given a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters. If there are multiple substrings with equal lengths, return the leftmost one.": 0.17721518987341772}, "avg_similarity_score": 0.0900988640685536}
{"instruction": "Given a string s, reverse the string according to the following rules:\nAll the characters that are not English letters remain in the same position.\nAll the English letters (lowercase or uppercase) should be reversed.\nReturn s after reversing it.\n\nExample 1:\nInput: s = \"ab-cd\"\nOutput: \"dc-ba\"\n\nExample 2:\nInput: s = \"a-bC-dEf-ghIj\"\nOutput: \"j-Ih-gfE-dCba\"\n\nExample 3:\nInput: s = \"Test1ng-Leet=code-Q!\"\nOutput: \"Qedo1ct-eeLg=ntse-T!\"", "input": "", "output": "```py\nclass Solution:\n    def reverseOnlyLetters(self, s: str) -> str:\n        l = []\n        r = []\n        for i in range(len(s)):\n            if ord(\"a\") <= ord(s[i].lower()) <= ord(\"z\"):\n                l.append(s[i])\n            elif ord(\"A\") <= ord(s[i]) <= ord(\"Z\"):\n                r.append(s[i])\n        l.reverse()\n        r.reverse()\n        return \"\".join(l)+\"\".join(r)+\"\".join([s[i] for i in range(len(s)) if i not in range(len(l))]+[s[i] for i in range(len(s)) if i not in range(len(r))])\n```", "most_similar": {"Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitions of s.\n\nAn empty string is also considered valid.\n\nExample 1:\nInput: s = \"aab\"\nOutput: [[\"aa\",\"b\"],[\"a\",\"a\",\"b\"]]\n\nExample 2:\nInput: s = \"a\"\nOutput: [[\"a\"]]": 0.3089430894308943, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.17142857142857143, "Given a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters. If there are multiple substrings with equal lengths, return the leftmost one.": 0.169811320754717, "Write a Python program that takes a list of numbers as input from the user, calculates the sum of all even numbers in the list, and returns the result. The program should check if the input is valid (i.e., if it's a list of numbers), and if it's not, it should return an error message. The program should also handle exceptions gracefully and return a user-friendly error message in case of any exceptions.": 0.15789473684210528, "Given a string `s`, find the length of the longest substring without repeating characters.": 0.15730337078651685, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.15254237288135591, "Write a function that reverses a string. The input string is given as an array of characters char[]. Do not allocate extra space for another array, you must do this by modifying the input array itself. You may assume all the characters consist of printable ascii characters.": 0.14754098360655737, "Write a function that takes a string as input and returns the string reversed. Example: Given s = \"hello\", return \"olleh\".": 0.14736842105263157, "You are given a binary tree in which each node contains an integer value. Find the largest value in each row of the tree.\n\nExample:\nInput:\n\n        1\n     /     \\\n    3       2\nOutput: [1, 3, 2]\nExplanation:\nRow 1: 1 is the largest integer in the row.\nRow 2: 3 is the largest integer in the row.\nRow 3: 2 is the largest integer in the row.": 0.14388489208633093, "Given a non-empty array of integers, write a function that returns the minimum difference between the largest and smallest values in the array.\n\nFor example, given \\[3, 10, 5\\], the function should return 7 since the largest value is 10 and the smallest is 3. But given \\[10, 3, 5\\], the function should return 2 since the largest value is 10 and the smallest is 5.": 0.14084507042253522}, "avg_similarity_score": 0.07906793509372816}
{"instruction": "Given a string s, determine whether it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nExample 1:\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\nExample 2:\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n\nExample 3:\nInput: s = \" \"\nOutput: true\nExplanation: s consists of only space characters.\nBecause whitespace characters are ignored, it is treated as an empty string \"\", which is a palindrome.\n\nExample 4:\nInput: s = \"-.\"\nOutput: true\nExplanation: \"-.\" is a palindrome.\n\nExample 5:\nInput: s = \"*#@&$%\"\nOutput: true\nExplanation: \"*#@&$%\" is a palindrome.\nAlthough we treat \"#\" differently from other symbols, it is still a palindrome.", "input": "", "output": "```py\nclass Solution:\n    def isPalindrome(self, s: str) -> bool:\n        s = re.sub('\\W|_|\\d',' ',s).strip().replace(' ','').upper()\n        return s == s[::-1]\n```", "most_similar": {"Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitions of s.\n\nAn empty string is also considered valid.\n\nExample 1:\nInput: s = \"aab\"\nOutput: [[\"aa\",\"b\"],[\"a\",\"a\",\"b\"]]\n\nExample 2:\nInput: s = \"a\"\nOutput: [[\"a\"]]": 0.3018867924528302, "Given a string s, reverse the string according to the following rules:\nAll the characters that are not English letters remain in the same position.\nAll the English letters (lowercase or uppercase) should be reversed.\nReturn s after reversing it.\n\nExample 1:\nInput: s = \"ab-cd\"\nOutput: \"dc-ba\"\n\nExample 2:\nInput: s = \"a-bC-dEf-ghIj\"\nOutput: \"j-Ih-gfE-dCba\"\n\nExample 3:\nInput: s = \"Test1ng-Leet=code-Q!\"\nOutput: \"Qedo1ct-eeLg=ntse-T!\"": 0.22580645161290325, "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.14492753623188406, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.14184397163120566, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.12987012987012986, "You need to read a code and detect if there is a syntax error or not. Outpus true if there is error, output false if there is not.": 0.12949640287769784, "Write a Python program that takes a list of numbers as input from the user, calculates the sum of all even numbers in the list, and returns the result. The program should check if the input is valid (i.e., if it's a list of numbers), and if it's not, it should return an error message. The program should also handle exceptions gracefully and return a user-friendly error message in case of any exceptions.": 0.1276595744680851, "You are given a binary tree in which each node contains an integer value. Find the largest value in each row of the tree.\n\nExample:\nInput:\n\n        1\n     /     \\\n    3       2\nOutput: [1, 3, 2]\nExplanation:\nRow 1: 1 is the largest integer in the row.\nRow 2: 3 is the largest integer in the row.\nRow 3: 2 is the largest integer in the row.": 0.12571428571428572, "Given a non-empty array of integers, write a function that returns the minimum difference between the largest and smallest values in the array.\n\nFor example, given \\[3, 10, 5\\], the function should return 7 since the largest value is 10 and the smallest is 3. But given \\[10, 3, 5\\], the function should return 2 since the largest value is 10 and the smallest is 5.": 0.12359550561797752, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.11764705882352941}, "avg_similarity_score": 0.049976461038202157}
{"instruction": "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n\nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\n\nExample 1:\nInput: s = \"bcabc\"\nOutput: \"abc\"\n\nExample 2:\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"", "input": "", "output": "```py\nclass Solution:\n    def removeDuplicateLetters(self, s: str) -> str:\n        freq = collections.Counter(s)\n        st = []\n        seen = set()\n        for i in s:\n            if i not in seen:\n                while st and st[-1] > i and freq[st[-1]] > 0:\n                    seen.remove(st.pop())\n                if i not in seen:\n                    st.append(i)\n                    seen.add(i)\n                    freq[i] -= 1\n        return ''.join(st)\n```", "most_similar": {"Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitions of s.\n\nAn empty string is also considered valid.\n\nExample 1:\nInput: s = \"aab\"\nOutput: [[\"aa\",\"b\"],[\"a\",\"a\",\"b\"]]\n\nExample 2:\nInput: s = \"a\"\nOutput: [[\"a\"]]": 0.3603603603603603, "Given a string s, reverse the string according to the following rules:\nAll the characters that are not English letters remain in the same position.\nAll the English letters (lowercase or uppercase) should be reversed.\nReturn s after reversing it.\n\nExample 1:\nInput: s = \"ab-cd\"\nOutput: \"dc-ba\"\n\nExample 2:\nInput: s = \"a-bC-dEf-ghIj\"\nOutput: \"j-Ih-gfE-dCba\"\n\nExample 3:\nInput: s = \"Test1ng-Leet=code-Q!\"\nOutput: \"Qedo1ct-eeLg=ntse-T!\"": 0.2608695652173913, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.2365591397849462, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.19753086419753085, "Given a string s, determine whether it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nExample 1:\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\nExample 2:\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n\nExample 3:\nInput: s = \" \"\nOutput: true\nExplanation: s consists of only space characters.\nBecause whitespace characters are ignored, it is treated as an empty string \"\", which is a palindrome.\n\nExample 4:\nInput: s = \"-.\"\nOutput: true\nExplanation: \"-.\" is a palindrome.\n\nExample 5:\nInput: s = \"*#@&$%\"\nOutput: true\nExplanation: \"*#@&$%\" is a palindrome.\nAlthough we treat \"#\" differently from other symbols, it is still a palindrome.": 0.1954022988505747, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.18867924528301885, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.18181818181818182, "Given a string `s`, find the length of the longest substring without repeating characters.": 0.1818181818181818, "Given a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters. If there are multiple substrings with equal lengths, return the leftmost one.": 0.1702127659574468, "Write a function that reverses a string. The input string is given as an array of characters char[]. Do not allocate extra space for another array, you must do this by modifying the input array itself. You may assume all the characters consist of printable ascii characters.": 0.16363636363636364}, "avg_similarity_score": 0.08872785214562005}
{"instruction": "You need to write a function that accepts three parameters:\na positive integer n\nan array containing k distinct elements\nanother array containing l distinct elements\nYour function needs to find out whether the arrays contain subsets whose sums equal n. If yes, return true; otherwise, return false.\n\nFor instance, let\u2019s say n equals 10, k equals 3, and our first array contains the following elements: [1, 2, 3]. Our second array contains the following elements: [1, 2, 4]. Since both arrays contain subsets whose sums equal 10, your function should return true. On the other hand, if n equals 10, k equals 3, and our first array contains the following elements: [1, 2, 3]. Our second array contains the following elements: [1, 2, 5]. In this case, neither array contains a subset whose sum equals 10, therefore, your function should return false.", "input": "", "output": "We can solve this problem efficiently using dynamic programming. We maintain a boolean matrix dp where dp[i][j] represents whether the subarray starting at index j and ending at index i (both inclusive) forms a contiguous subarray whose sum equals n. To fill the entries of this matrix, we consider all possible combinations of adding a new element to the existing subarray formed till now. Let\u2019s take an example to understand how this works. Consider the above mentioned example where n equals 10, k equals 3, and our first array contains the following elements: [1, 2, 3]. Our second array contains the following elements: [1, 2, 4]. Now, suppose we want to know whether the subarray starting at index 0 and ending at index 2 (both inclusive) forms a contiguous subarray whose sum equals 10. There are four ways to form a contiguous subarray whose sum equals 10:\n\nSubarray starting at index 0 and ending at index 0: [1]\nSubarray starting at index 0 and ending at index 1: [1, 2]\nSubarray starting at index 0 and ending at index 2: [1, 2, 3]\nSubarray starting at index 1 and ending at index 2: [2, 3]\nNow, since the last entry in the previous row corresponds to the subarray starting at index 0 and ending at index 0, we update the value of dp[2][0] to true. Similarly, since the fourth entry in the previous row corresponds to the subarray starting at index 1 and ending at index 2, we update the value of dp[2][2] to true. Finally, since the fifth entry in the previous row corresponds to the subarray starting at index 0 and ending at index 1, we update the value of dp[2][1] to true. After filling the entire matrix, we can easily determine whether either of the two arrays contains a subset whose sum equals n.\n\nBelow is the implementation of the above idea:\n\n```java\npublic class SubsetSumDP {\n   public static void main(String[] args){\n       // Input: arr1 = [1, 2, 3]; arr2 = [1, 2, 4]; n = 10\n       int[] arr1 = {1, 2, 3};\n       int[] arr2 = {1, 2, 4};\n       System.out.println(subsetSum(arr1, arr2));\n   }\n   private static boolean subsetSum(int[] arr1, int[] arr2){\n       /* Create a boolean matrix dp where dp[i][j] stores whether the subarray starting at index j and ending at index i (both inclusive) forms a contiguous subarray whose sum equals n */\n       boolean[][] dp = new boolean[arr1.length+1][arr2.length+1];\n       /* Fill the entries of this matrix */\n       for(int i=0; i<=arr1.length; ++i){\n           for(int j=0; j<=arr2.length; ++j){\n               if((i==0 && j!=0) || (i!=0 && j==0)){\n                   dp[i][j]=false;\n               }else if(i==0 && j==0){\n                   dp[i][j]=true;\n               }else{\n                   dp[i][j]=(dp[i-1][j]+dp[i][j-1]);\n               }\n           }\n       }\n       /* Return true if either of the two arrays contains a subset whose sum equals n */\n       return Arrays.stream(dp[arr1.length]).anyMatch(x-> x);\n   }\n}\n```\n\nTime complexity : O(kn)O(kn)\nSpace Complexity : O(kn)O(kn)", "most_similar": {"Given a non-empty array of integers, write a function that returns the minimum difference between the largest and smallest values in the array.\n\nFor example, given \\[3, 10, 5\\], the function should return 7 since the largest value is 10 and the smallest is 3. But given \\[10, 3, 5\\], the function should return 2 since the largest value is 10 and the smallest is 5.": 0.1990521327014218, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.1711229946524064, "You are given a binary tree in which each node contains an integer value. Find the largest value in each row of the tree.\n\nExample:\nInput:\n\n        1\n     /     \\\n    3       2\nOutput: [1, 3, 2]\nExplanation:\nRow 1: 1 is the largest integer in the row.\nRow 2: 3 is the largest integer in the row.\nRow 3: 2 is the largest integer in the row.": 0.16346153846153844, "Implement a function that accepts a string containing digits from 2-9 with various lengths. The function should replace every digit with the word equivalent of that digit (e.g., 2 becomes \u2018two\u2019, 3 becomes \u2018three\u2019, \u2026 , 9 becomes \u2018nine\u2019). There is no need to validate the contents of the input string.": 0.14358974358974358, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.1420118343195266, "Write a Python program that takes a list of numbers as input from the user, calculates the sum of all even numbers in the list, and returns the result. The program should check if the input is valid (i.e., if it's a list of numbers), and if it's not, it should return an error message. The program should also handle exceptions gracefully and return a user-friendly error message in case of any exceptions.": 0.13574660633484165, "Write a function that reverses a string. The input string is given as an array of characters char[]. Do not allocate extra space for another array, you must do this by modifying the input array itself. You may assume all the characters consist of printable ascii characters.": 0.1256544502617801, "Create a function that converts a name into initials. Given a name, the function should return the first letter of every word capitalized.": 0.11976047904191615, "Write a C++ function that takes a map as an input and returns the largest pair in the map, in 8 lines or fewer. A pair is considered larger if its second value is larger than another pair's second value.": 0.11891891891891894, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.11494252873563217}, "avg_similarity_score": 0.06544015785499308}
{"instruction": "Imagine you are building a compiler for a very basic programming language. Your job is to implement a parser for arithmetic expressions. An expression consists of digits, addition, multiplication, parenthesis, and negative signs. Expressions look something like this:\n\n```\n1+(2-(3*(-4)))\n```\n\nIn this example, the expression evaluates to 1+(2-(3*(-4))) = 1+(2-(-12)) = 1+(2+12) = 14.\n\nA sample input could be:\n\n```\n1+(2-(3*(-4)))\n```\n\nAnd a corresponding output could be:\n\n```\n14\n```\n\nIf the input does not represent a well-formed expression, throw an exception.", "input": "", "output": "Here's a sample implementation of a parser for arithmetic expressions written in Java:\n\n``` java\nimport java.util.*;\n\npublic class ArithmeticParser {\n\tprivate String expr;\n\tprivate Stack<Integer> stack;\n\tprivate Map<Character, Integer> precedenceMap;\n\n\tArithmeticParser(){\n\t\tstack = new Stack<>();\n\t\tprecedenceMap = new HashMap<>();\n\t\tprecedenceMap.put('(', 0);\n\t\tprecedenceMap.put('+', 1);\n\t\tprecedenceMap.put('-', 1);\n\t\tprecedenceMap.put('*', 2);\n\t\tprecedenceMap.put('/', 2);\n\t}\n\n\tvoid parseExpression(String expr){\n\t\tthis.expr = expr;\n\t\tfor(int i=0; i<expr.length(); i++){\n\t\t\tparseToken(expr.substring(i, i+1));\n\t\t}\n\t}\n\n\tboolean isOperator(String token){\n\t\tswitch(token){\n\t\tcase \"+\":\n\t\tcase \"-\":\n\t\tcase \"*\":\n\t\tcase \"/\":\n\t\t\treturn true;\n\t\tdefault:\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tboolean isLeftParentheses(String token){\n\t\treturn token.equals(\"(\");\n\t}\n\n\tboolean isRightParentheses(String token){\n\t\treturn token.equals(\")\");\n\t}\n\n\tboolean isDigit(String token){\n\t\ttry{\n\t\t\tInteger.parseInt(token);\n\t\t\treturn true;\n\t\t}catch(NumberFormatException ex){\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tint peekPrecedence(){\n\t\treturn precedenceMap.getOrDefault(peekStack(), 0);\n\t}\n\n\tint popPrecedence(){\n\t\treturn precedenceMap.getOrDefault(popStack(), 0);\n\t}\n\n\tString peekStack(){\n\t\treturn stack.isEmpty() ? \"\" : stack.peek().toString();\n\t}\n\n\tString popStack(){\n\t\treturn stack.empty() ? null : stack.pop().toString();\n\t}\n\n\tvoid pushOperand(String operand){\n\t\tstack.push(operand);\n\t}\n\n\tvoid pushOperator(String op){\n\t\twhile(!stack.isEmpty() && !isLeftParentheses(peekStack())) {\n\t\t\tif(peekPrecedence() <= popPrecedence()){\n\t\t\t\tevaluateTopOfStack();\n\t\t\t}else break;\n\t\t}\n\t\tstack.push(op);\n\t}\n\n\tvoid evaluateTopOfStack(){\n\t\tString rhs = popStack();\n\t\tString poppedOp = popStack();\n\t\tString lhs = popStack();\n\t\tint val = eval(lhs, poppedOp, rhs);\n\t\tpushOperand(val+\"\");\n\t}\n\n\tint eval(String lhs, String op, String rhs){\n\t\tint leftVal = Integer.valueOf(lhs);\n\t\tint rightVal = Integer.valueOf(rhs);\n\t\tswitch(op){\n\t\tcase \"+\":\n\t\t\treturn leftVal + rightVal;\n\t\tcase \"-\":\n\t\t\treturn leftVal - rightVal;\n\t\tcase \"*\":\n\t\t\treturn leftVal * rightVal;\n\t\tcase \"/\":\n\t\t\treturn leftVal / rightVal;\n\t\tdefault:\n\t\t\tthrow new IllegalArgumentException(\"Unknown Operator:\" + op);\n\t\t}\n\t}\n\n\tvoid parseToken(String token){\n\t\tif(isDigit(token)){\n\t\t\tpushOperand(token);\n\t\t}else if(isOperator(token)){\n\t\t\tpushOperator(token);\n\t\t}else if(isLeftParentheses(token)){\n\t\t\tstack.push(token);\n\t\t}else if(isRightParentheses(token)){\n\t\t\twhile (!peekStack().equals(\"(\")) {\n\t\t\t\tevaluateTopOfStack();\n\t\t\t}\n\t\t\tpopStack();\n\t\t}else{\n\t\t\tthrow new RuntimeException(\"Unexpected Token:\" + token);\n\t\t}\n\t}\n\n\t@Override\n\tpublic String toString(){\n\t\treturn stack.size() != 1 ? \"Not Valid Expression!\" : stack.elementAt(0)+ \"\";\n\t}\n\n\tpublic static void main(String[] args){\n\t\tSystem.out.print(\"\\n\\nTest Case 1:\\n\");\n\t\tnew ArithmeticParser().parseExpression(\"1+(2-(3*(-4)))\").toString();\n\t\tSystem.out.print(\"\\n\\nTest Case 2:\\n\");\n\t\tnew ArithmeticParser().parseExpression(\"1+2*3/(4-5)-6\").toString();\n\t\tSystem.out.print(\"\\n\\nTest Case 3:\\n\");\n\t\tnew ArithmeticParser().parseExpression(\"1+2*3/-4--5-+6\").toString();\n\t}\n}\n```\n\nTime Complexity : O(|expression|)O(|expression|)\nSpace Complexity : O(|expression|)O(|expression|)", "most_similar": {"You are given a binary tree in which each node contains an integer value. Find the largest value in each row of the tree.\n\nExample:\nInput:\n\n        1\n     /     \\\n    3       2\nOutput: [1, 3, 2]\nExplanation:\nRow 1: 1 is the largest integer in the row.\nRow 2: 3 is the largest integer in the row.\nRow 3: 2 is the largest integer in the row.": 0.19607843137254902, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.16666666666666669, "You need to write a function that accepts three parameters:\na positive integer n\nan array containing k distinct elements\nanother array containing l distinct elements\nYour function needs to find out whether the arrays contain subsets whose sums equal n. If yes, return true; otherwise, return false.\n\nFor instance, let\u2019s say n equals 10, k equals 3, and our first array contains the following elements: [1, 2, 3]. Our second array contains the following elements: [1, 2, 4]. Since both arrays contain subsets whose sums equal 10, your function should return true. On the other hand, if n equals 10, k equals 3, and our first array contains the following elements: [1, 2, 3]. Our second array contains the following elements: [1, 2, 5]. In this case, neither array contains a subset whose sum equals 10, therefore, your function should return false.": 0.1630901287553648, "Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitions of s.\n\nAn empty string is also considered valid.\n\nExample 1:\nInput: s = \"aab\"\nOutput: [[\"aa\",\"b\"],[\"a\",\"a\",\"b\"]]\n\nExample 2:\nInput: s = \"a\"\nOutput: [[\"a\"]]": 0.16058394160583941, "The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\n\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\nGiven n, calculate F(n)": 0.1388888888888889, "You need to read a code and detect if there is a syntax error or not. Outpus true if there is error, output false if there is not.": 0.13675213675213674, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.13445378151260504, "Write a Python program that takes a list of numbers as input from the user, calculates the sum of all even numbers in the list, and returns the result. The program should check if the input is valid (i.e., if it's a list of numbers), and if it's not, it should return an error message. The program should also handle exceptions gracefully and return a user-friendly error message in case of any exceptions.": 0.1325301204819277, "Write a function that reverses a string. The input string is given as an array of characters char[]. Do not allocate extra space for another array, you must do this by modifying the input array itself. You may assume all the characters consist of printable ascii characters.": 0.13235294117647062, "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n\nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\n\nExample 1:\nInput: s = \"bcabc\"\nOutput: \"abc\"\n\nExample 2:\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"": 0.13157894736842105}, "avg_similarity_score": 0.07513690547358957}
{"instruction": "Write a function that reverses a singly linked list. Do NOT use recursion!", "input": "", "output": "Here's a sample implementation of a doubly linked list in C++:\n\n``` cpp\nstruct Node {\n    int key;\n    struct Node *prev;\n    struct Node *next;\n};\n\nNode *head = NULL;\n\n/* Function to reverse the linked list */\nvoid reverseLinkedList() {\n    Node *tempHead = head;\n    Node *curr = tempHead;\n    Node *next = curr->next;\n\n    while (curr != NULL) {\n        next = curr->next;\n        curr->next = curr->prev;\n        curr->prev = next;\n        curr = next;\n    }\n\n    head = tempHead->prev;\n}\n```\n\nTime Complexity : O(N)O(N)\nSpace Complexity : O(1)O(1)", "most_similar": {"Write a python function that sorts a list from large to small.": 0.48000000000000004, "Write a Python function to reverse a given list of integers.": 0.41666666666666663, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.3870967741935484, "Write a function that checks if a binary tree is symmetric around its center.": 0.3703703703703704, "Write a function that removes duplicates from an unsorted linked list. Follow up: How would you solve this problem if a temporary buffer is not allowed?": 0.3589743589743589, "Write a function that removes duplicate words from a string. All whitespace characters must separate the words.": 0.33333333333333337, "write a c++ program that calculates the perimeter of a square": 0.33333333333333337, "Write a function that computes the greatest common divisor of two positive integer numbers. Use Euclid's Algorithm.": 0.3225806451612903, "Write a function that determines whether a triangle is equilateral, isosceles, scalene based on three side lengths provided.": 0.3225806451612903, "Write a script to output the mean of a list of integers.": 0.32}, "avg_similarity_score": 0.14053554097921855}
{"instruction": "Write a function that checks if a given string is a palindrome. Assume that the maximum length of the string is 1000 characters. What techniques can you use to speed up the checking process?", "input": "", "output": "There are many different approaches to solving this problem. One straightforward method is to compare the character at position i with the character at position n\u2212i\u22121, where n is the length of the string. However, this approach is too slow because it involves comparing each character with every other character in the string. Instead, we can use a technique known as divide and conquer.\n\nDivide and Conquer\n\nInstead of directly comparing each character with every other character, we can partition the string into two halves and compare them separately. Then, we can merge the comparison results together to produce the final result.\n\nConsider the following example:\n\n```\nabcdcba\n```\n\nWe can partition the string into \u201cab\u201d and \u201cdcba\u201d. First, we compare ab and cd. Next, we compare ba and dc. Note that we ignore the middle character \u2018c\u2019 because it is already compared during the first stage. Therefore, we end up with the following table:\n\nComparison Result Table\n\nSince both comparisons resulted in true, we conclude that the original string was indeed a palindrome.\n\nAnother example:\n\n```\nabbad\n```\n\nWe can again partition the string into \u201cab\u201d and \u201cbad\u201d, but this time, the first comparison fails. Hence, we stop immediately without performing the second comparison. As a result, we end up with the following table:\n\nComparison Result Table\n\nBecause the first comparison failed, we conclude that the original string was not a palindrome.\n\nHere's a sample implementation of the above idea in C++:\n\n```cpp\nbool isPalindrome(string& s) {\n    bool res = true;\n    int size = s.size();\n    for (int i = 0; i < size / 2; i++) {\n        if (s[i] != s[size - i - 1]) {\n            res = false;\n            break;\n        }\n    }\n    return res;\n}\n```\n\nTime Complexity : O(N)O(N)\nSpace Complexity : O(1)O(1)", "most_similar": {"Write a function that reverses a string. The input string is given as an array of characters s.": 0.3846153846153846, "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.": 0.36065573770491804, "Write a function that checks if a binary tree is symmetric around its center.": 0.3333333333333333, "Write a function that removes duplicate words from a string. All whitespace characters must separate the words.": 0.3137254901960785, "Write a function that takes a string as input and returns the string reversed. Example: Given s = \"hello\", return \"olleh\".": 0.29629629629629634, "Write a function that reverses a string. The input string is given as an array of characters char[]. Do not allocate extra space for another array, you must do this by modifying the input array itself. You may assume all the characters consist of printable ascii characters.": 0.2962962962962963, "Given a string `s`, find the length of the longest substring without repeating characters.": 0.2916666666666667, "Write a function that counts the total number of prime numbers up to N.": 0.2916666666666667, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.28125, "Create a function that converts a name into initials. Given a name, the function should return the first letter of every word capitalized.": 0.28070175438596484}, "avg_similarity_score": 0.14985872060167707}
{"instruction": "Write a function that counts the occurrences of a substring within a string.", "input": "", "output": "Here's a sample implementation of the above idea in JavaScript:\n\n``` js\nfunction substrCount(str, pattern) {\n    var count = 0;\n    var idx = str.indexOf(pattern);\n    while (idx != -1) {\n        count++;\n        idx = str.indexOf(pattern, idx + 1);\n    }\n    return count;\n}\nconsole.log(substrCount('aaaaaaa', 'aa'))\n```\n\nTime Complexity : O(M\u00d7N)O(M\u00d7N)\nSpace Complexity : O(1)O(1)", "most_similar": {"Write a function that counts the total number of prime numbers up to N.": 0.5185185185185186, "write a c++ program that calculates the perimeter of a square": 0.4999999999999999, "Write a function that calculates the sum of all odd fibonacci numbers below n.": 0.4444444444444445, "Write a function that removes duplicate words from a string. All whitespace characters must separate the words.": 0.4000000000000001, "Write a python function that sorts a list from large to small.": 0.4, "Write a script to output the mean of a list of integers.": 0.4, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.3870967741935484, "Write a function that computes the greatest common divisor of two positive integer numbers. Use Euclid's Algorithm.": 0.3870967741935484, "Write a function that reverses a singly linked list. Do NOT use recursion!": 0.38461538461538464, "write a java function that implements gray code and returns the next sequence code after a given code in a given direction of rotation": 0.3783783783783784}, "avg_similarity_score": 0.18788135397254435}
{"instruction": "What does the \u201c*\u201d operator mean in python?", "input": "", "output": "When applied before a variable name, the unary star (*) acts as a placeholder for zero or more arguments. This means that the argument passed to the function must be iterable. When applied after a parameter name, the starred parameter collects positional arguments as a tuple. Here\u2019s an example:\n\n```\n>>> def func(*args):\n...     print('Received',len(args), 'arguments')\n...     print('Argument List: ', end=' ')\n...     for arg in args:\n...         print(arg,end=' ')\n...\n>>> func(1,2,'three','four')\nReceived 4 arguments\nArgument List: 1 2 three four\n>>> func()\nReceived 0 arguments\nArgument List:\n>>>\n```\n\nIf you pass multiple arguments to a function expecting only one argument, they get grouped together inside a tuple.\n\n```\n>>> def func(arg):\n...     print ('Single Argument:', arg)\n...\n>>> func(1,2,\"Three\")\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in ?\nTypeError: func expected 1 arguments, got 3\n>>> func(*(1,2,\"Three\"))\nSingle Argument: (1, 2, Three)\n>>>\n```\n\nSimilarly, if you have a function accepting multiple arguments but you want to pass just one argument, you can wrap them around parenthesis.\n\n```\n>>> def func(arg1, arg2, arg3):\n...     print (\"Arg1:\", arg1)\n...     print (\"Arg2:\", arg2)\n...     print (\"Arg3:\", arg3)\n...\n>>> func(1,(2,3,4),(5,6,7))\nArg1: 1\nArg2: (2, 3, 4)\nArg3: (5, 6, 7)\n>>>\n```\n\nThis behavior is similar to what happens when passing keyword arguments to functions.\n\n```\n>>> def func(**kwargs):\n...     print kwargs\n...\n>>> func(key1=1, key2=[2,3,4], key3={\"five\": 5})\n{'key1': 1, 'key2': [2, 3, 4], 'key3': {'five': 5}}\n>>>\n```\n\nNote that the ** operator has no effect unless followed by a dictionary object.\n\n```\n>>> def func(**kwargs):\n...     print kwargs\n...\n>>> func(key1=1, key2=[2,3,4], key3={\"five\": 5}, key4=None)\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in ?\nTypeError: func() keywords must be strings\n>>>\n```", "most_similar": {"How do I get the power of a number in python?": 0.33333333333333326, "How do you output all the contents of a list in Python?": 0.3157894736842105, "bubble sort list of int in python": 0.2857142857142857, "What is the difference between a pointer variable and a reference variable in Java?": 0.2857142857142857, "Suggest a completion for the following python code.": 0.26666666666666666, "Create a calculator in the Python programming language": 0.26666666666666666, "Translate the following code from python in Java.": 0.26666666666666666, "Write a script to output 'Hello World' in python": 0.25, "Replace all the human names in the paragraph with <anonymized>.": 0.23529411764705882, "Identify the pos tag of the word in the given sentence.": 0.2222222222222222}, "avg_similarity_score": 0.09656818256830285}
{"instruction": "Given a string s consisting of small English letters, find and return the first instance of a non-repeating character in it. If there is no such character, return '_'.\n\nExamples:\n\nInput: s = \"abacabad\"\nOutput: \"b\"\nExplanation: The first non-repeating character is 'b'.\n\nInput: s = \"zabbaxxxxyyyyzzzyabcd\"\nOutput: \"_\"\nExplanation: There are no characters that appear exactly once.\n\nInput: s = \"abcdeeeefghiijklmnoppqqrrssstuvwxyz\"\nOutput: \"t\"\nExplanation: The first non-repeating character is 't'.\n\nInput: s = \"\"\nOutput: \"_\"\nExplanation: An empty string has no characters.", "input": "", "output": "A straightforward approach is to iterate over every character in the string and count their frequency. Then, we can pick the first unique character encountered while traversing through the string. However, this approach requires extra space proportional to the size of the alphabet. Can we optimize it further without using extra space?\n\nYes, we can. Instead of counting frequencies, we can directly store the occurrence of each character in the string. Once we encounter a repeated character, we can immediately stop searching for the next unique character. Below is the implementation of this idea:\n\n```cpp\nclass Solution {\npublic:\n    char firstUniqChar(string s) {\n        vector<bool> seen(26, false);\n        for (char ch : s) {\n            if (!seen[(ch - 'a')]) {\n                seen[(ch - 'a')] = true;\n            } else {\n                seen[(ch - 'a')] = false;\n            }\n        }\n        for (size_t i = 0; i != seen.size(); ++i) {\n            if (seen[i]) {\n                return 'a' + i;\n            }\n        }\n        return '_';\n    }\n};\n```\n\nTime complexity : O(|s|)O(|s|). Each character is visited twice.\nSpace complexity : O(1)O(1). Constant space is used.", "most_similar": {"Given a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters. If there are multiple substrings with equal lengths, return the leftmost one.": 0.2909090909090909, "Given a string s, determine whether it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nExample 1:\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\nExample 2:\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n\nExample 3:\nInput: s = \" \"\nOutput: true\nExplanation: s consists of only space characters.\nBecause whitespace characters are ignored, it is treated as an empty string \"\", which is a palindrome.\n\nExample 4:\nInput: s = \"-.\"\nOutput: true\nExplanation: \"-.\" is a palindrome.\n\nExample 5:\nInput: s = \"*#@&$%\"\nOutput: true\nExplanation: \"*#@&$%\" is a palindrome.\nAlthough we treat \"#\" differently from other symbols, it is still a palindrome.": 0.27368421052631575, "Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitions of s.\n\nAn empty string is also considered valid.\n\nExample 1:\nInput: s = \"aab\"\nOutput: [[\"aa\",\"b\"],[\"a\",\"a\",\"b\"]]\n\nExample 2:\nInput: s = \"a\"\nOutput: [[\"a\"]]": 0.25196850393700787, "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n\nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\n\nExample 1:\nInput: s = \"bcabc\"\nOutput: \"abc\"\n\nExample 2:\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"": 0.23943661971830987, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.23853211009174313, "Given a string s, reverse the string according to the following rules:\nAll the characters that are not English letters remain in the same position.\nAll the English letters (lowercase or uppercase) should be reversed.\nReturn s after reversing it.\n\nExample 1:\nInput: s = \"ab-cd\"\nOutput: \"dc-ba\"\n\nExample 2:\nInput: s = \"a-bC-dEf-ghIj\"\nOutput: \"j-Ih-gfE-dCba\"\n\nExample 3:\nInput: s = \"Test1ng-Leet=code-Q!\"\nOutput: \"Qedo1ct-eeLg=ntse-T!\"": 0.23376623376623376, "Given a string `s`, find the length of the longest substring without repeating characters.": 0.21505376344086025, "Write a function that finds the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".": 0.2115384615384615, "Implement a function that accepts a string containing digits from 2-9 with various lengths. The function should replace every digit with the word equivalent of that digit (e.g., 2 becomes \u2018two\u2019, 3 becomes \u2018three\u2019, \u2026 , 9 becomes \u2018nine\u2019). There is no need to validate the contents of the input string.": 0.16923076923076924, "You need to read a code and detect if there is a syntax error or not. Outpus true if there is error, output false if there is not.": 0.16822429906542058}, "avg_similarity_score": 0.08477766008782972}
{"instruction": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\nPush(x) -- Push element x onto stack.\nPop() -- Removes the element on top of the stack.\nTop() -- Get the top element.\nGetMin() -- Retrieve the minimum element in the stack.", "input": "", "output": "Since we need to retrieve the minimum element in constant time, we cannot rely on storing the minimum element along with the rest of the elements in the stack. One alternative is to scan the whole stack everytime we invoke the GetMin() method. However, this approach results in quadratic runtime.\n\nInstead, we can utilize the fact that the minimum element lies somewhere between the bottom of the stack and the top of the stack. Thus, we can maintain a separate min stack that keeps track of the minimum element seen so far during the insertion process. Everytime we push a new element onto the original stack, we also push the smaller of the newly inserted element and the current minimum element onto the min stack. Lastly, when popping off an element from the original stack, we also pop off the corresponding element from the min stack.\n\nBelow is the implementation of the above idea:\n\n```js\nvar MinStack = function () {\n\tthis.stack = [];\n\tthis.minStack = [];\n};\n\n/**\n * @param {number} val\n * @return {void}\n */\nMinStack.prototype.push = function (val) {\n\tif (this.isEmpty()) {\n\t\t// First element pushed onto the stack\n\t\tthis.stack.push(val);\n\t\tthis.minStack.push(val);\n\t} else {\n\t\tconst currMinVal = Math.min(...this.getMin());\n\t\tthis.stack.push(Math.max(currMinVal, val));\n\t\tthis.minStack.push(Math.min(currMinVal, val));\n\t}\n};\n\n/**\n * @return {void}\n */\nMinStack.prototype.pop = function () {\n\tthis.stack.pop();\n\tthis.minStack.pop();\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.top = function () {\n\treturn this.stack[this.stack.length - 1];\n};\n\n/**\n * @return {number}\n */\nMinStack.prototype.getMin = function () {\n\treturn this.minStack[this.minStack.length - 1];\n};\n\n/**\n * @return {boolean}\n */\nMinStack.prototype.isEmpty = function () {\n\treturn !this.stack.length;\n};\n\n/**\n * Your MinStack object will be instantiated and called as such:\n * var obj = Object.create(MinStack).createNew()\n * obj.push(val)\n * obj.pop()\n * var param_3 = obj.top()\n * var param_4 = obj.getMin()\n */\n```\n\nTime complexity : O(1)O(1) for each operation.\nSpace complexity : O(N)O(N) where NN is the maximum capacity of the stack.", "most_similar": {"Can you provide a shell script that displays the total number of lines in all '*.txt' files in the current directory?": 0.18181818181818182, "Given a non-empty array of integers, write a function that returns the minimum difference between the largest and smallest values in the array.\n\nFor example, given \\[3, 10, 5\\], the function should return 7 since the largest value is 10 and the smallest is 3. But given \\[10, 3, 5\\], the function should return 2 since the largest value is 10 and the smallest is 5.": 0.17857142857142855, "Identify the pos tag of the word in the given sentence.": 0.17857142857142855, "write a java function that implements gray code and returns the next sequence code after a given code in a given direction of rotation": 0.1739130434782609, "You are given a binary tree in which each node contains an integer value. Find the largest value in each row of the tree.\n\nExample:\nInput:\n\n        1\n     /     \\\n    3       2\nOutput: [1, 3, 2]\nExplanation:\nRow 1: 1 is the largest integer in the row.\nRow 2: 3 is the largest integer in the row.\nRow 3: 2 is the largest integer in the row.": 0.1651376146788991, "Write a C++ function that takes a map as an input and returns the largest pair in the map, in 8 lines or fewer. A pair is considered larger if its second value is larger than another pair's second value.": 0.1627906976744186, "Using the comment as a guide, replace the \"TODO\" comment in the code with the proper code.": 0.16129032258064516, "Create a JavaScript function that takes an array of numbers and returns the product of all elements.": 0.16129032258064516, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.16, "write a code to get the current value of a Bitcoin in US dollars using the bitcoincharts API.": 0.15873015873015872}, "avg_similarity_score": 0.09321192283956124}
{"instruction": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree. According to the definition of LCA on Wikipedia: \u201cThe lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both p and q as descendants (where we allow a node to be a descendant of itself).\u201d", "input": "", "output": "Here's a recursive approach to solving this problem:\n\n```java\npublic TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n\tif (root == null || root == p || root == q) return root; // base case\n\t// Recursively check left subtree\n\tTreeNode left = lowestCommonAncestor(root.left, p, q);\n\t// Recursively check right subtree\n\tTreeNode right = lowestCommonAncestor(root.right, p, q);\n\t// Check if either the left or right child is the LCA\n\tif (left != null && right != null) return root;\n\telse if (left != null) return left;\n\telse return right;\n}\n```\nLet's break down what happens here. First, we define our base cases which are when either the root is null, or when the root equals either p or q. In these situations, there is no lower common ancestor since the root doesn't exist or it is the same as one of the other nodes. Next, we recursively call the function twice, once for the left subtree and again for the right subtree. We store the results of those calls into variables named left and right respectively. Then, we check whether either the left or right child is the answer. This is done by checking if neither left nor right is null. If only one of them is non-null, then that must be the answer. Otherwise, if none of them were non-null, then the parent node was the lowest common ancestor.\n\nWe could also solve this problem iteratively instead of recursively. To do so, we would keep track of three things: the current node being visited, the path taken to get to the current node, and the depth of the current node. As soon as we encounter a leaf node, we stop traversing the tree. At this point, we compare the paths taken to determine if the two leaves share a common ancestor. If they do, then the shared ancestor is the lowest common ancestor.\n\nIf you want to learn more about finding the lowest common ancestor, check out my post on how to find the lowest common ancestor of two nodes in a binary search tree.", "most_similar": {"You are given a binary tree in which each node contains an integer value. Find the largest value in each row of the tree.\n\nExample:\nInput:\n\n        1\n     /     \\\n    3       2\nOutput: [1, 3, 2]\nExplanation:\nRow 1: 1 is the largest integer in the row.\nRow 2: 3 is the largest integer in the row.\nRow 3: 2 is the largest integer in the row.": 0.2222222222222222, "Write a Python program that takes a list of numbers as input from the user, calculates the sum of all even numbers in the list, and returns the result. The program should check if the input is valid (i.e., if it's a list of numbers), and if it's not, it should return an error message. The program should also handle exceptions gracefully and return a user-friendly error message in case of any exceptions.": 0.18705035971223022, "Given the `root` of a binary tree, return the inorder traversal of its nodes' values.": 0.18181818181818182, "Given a non-empty array of integers, write a function that returns the minimum difference between the largest and smallest values in the array.\n\nFor example, given \\[3, 10, 5\\], the function should return 7 since the largest value is 10 and the smallest is 3. But given \\[10, 3, 5\\], the function should return 2 since the largest value is 10 and the smallest is 5.": 0.17054263565891475, "Write a script to output the mean of a list of integers.": 0.16216216216216214, "Write me a function in C++ to find the distance between two points": 0.15999999999999998, "Given a string `s`, find the length of the longest substring without repeating characters.": 0.15789473684210525, "Given a string s consisting of small English letters, find and return the first instance of a non-repeating character in it. If there is no such character, return '_'.\n\nExamples:\n\nInput: s = \"abacabad\"\nOutput: \"b\"\nExplanation: The first non-repeating character is 'b'.\n\nInput: s = \"zabbaxxxxyyyyzzzyabcd\"\nOutput: \"_\"\nExplanation: There are no characters that appear exactly once.\n\nInput: s = \"abcdeeeefghiijklmnoppqqrrssstuvwxyz\"\nOutput: \"t\"\nExplanation: The first non-repeating character is 't'.\n\nInput: s = \"\"\nOutput: \"_\"\nExplanation: An empty string has no characters.": 0.15602836879432622, "Given a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters. If there are multiple substrings with equal lengths, return the leftmost one.": 0.15053763440860216, "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\n\nPush(x) -- Push element x onto stack.\nPop() -- Removes the element on top of the stack.\nTop() -- Get the top element.\nGetMin() -- Retrieve the minimum element in the stack.": 0.14953271028037382}, "avg_similarity_score": 0.0937898808430073}
{"instruction": "You are given a string s consisting of small English letters. Your task is to reverse the order of vowels in this string.\nA vowel is a letter 'a','o','u','e','i'.\nExample 1:\nInput: s = \"hello\"\nOutput: \"holle\"\nExample 2:\nInput: s = \"leetcode\"\nOutput: \"leotcede\"\nConstraints:\n1 <= s.length <= 3 * 10^5\ns consists of printable ASCII characters.", "input": "", "output": "Here's a simple Java program to accomplish this task:\n\n``` java\nclass Solution {\n    public String reverseVowels(String s) {\n        \n        char[] chars = new char[s.length()];\n        Set<Character> vowels = new HashSet<>();\n        vowels.addAll(Arrays.asList('a', 'e', 'i', 'o', 'u'));\n            \n        for (int i = 0; i < s.length(); ++i) {\n            Character c = s.charAt(i);\n            if (!vowels.contains(c)){\n               chars[i]=c;\n           }\n          else{\n              Stack<Character> stack = new Stack<>();\n              stack.push(c);\n              while(!stack.isEmpty()) {\n                  chars[i++] = stack.pop();\n              }\n          }\n        }\n        return new String(chars);\n    }\n}\n```\nIn the above program, we initialize a hashset called vowels to contain all five vowels. We iterate through the string s and check if the current character is a vowel. If it isn't, we simply copy it to the final string without reversal. However, if it is a vowel, we put it onto a stack. Once we reach the end of the string, we empty the stack back into the original string starting at the index after the previous vowel.\n\nFor example, consider the string \"hello\". After processing the h, we move on to the e. Since e is a vowel, we push it onto the stack. Now, we continue processing llo. Since l is not a vowel, we just copy it directly to the final string. But now we hit o, which is a vowel. So we push it onto the stack. Finally, we finish off the iteration by popping the stack back into the final string. Thus, the final string looks something like this: heollll. Note that the vowels appear in reverse order compared to the original string.\n\nNow, suppose we had a different string, say \"leetcode\". Again, we begin by pushing the first vowel, e, onto the stack. Then, we proceed to process codel. Since d is not a vowel, we copy it straight to the final string. Next, we hit e, which is a vowel. So we push it onto the stack. And finally, we finish off the iteration by copying the leek backwards into the final string. Hence, the final string looks like this: elecodlee. Notice that the vowels appear in reverse order compared to the original string.", "most_similar": {"Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitions of s.\n\nAn empty string is also considered valid.\n\nExample 1:\nInput: s = \"aab\"\nOutput: [[\"aa\",\"b\"],[\"a\",\"a\",\"b\"]]\n\nExample 2:\nInput: s = \"a\"\nOutput: [[\"a\"]]": 0.3518518518518519, "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n\nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\n\nExample 1:\nInput: s = \"bcabc\"\nOutput: \"abc\"\n\nExample 2:\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"": 0.3414634146341463, "Given a string s consisting of small English letters, find and return the first instance of a non-repeating character in it. If there is no such character, return '_'.\n\nExamples:\n\nInput: s = \"abacabad\"\nOutput: \"b\"\nExplanation: The first non-repeating character is 'b'.\n\nInput: s = \"zabbaxxxxyyyyzzzyabcd\"\nOutput: \"_\"\nExplanation: There are no characters that appear exactly once.\n\nInput: s = \"abcdeeeefghiijklmnoppqqrrssstuvwxyz\"\nOutput: \"t\"\nExplanation: The first non-repeating character is 't'.\n\nInput: s = \"\"\nOutput: \"_\"\nExplanation: An empty string has no characters.": 0.31654676258992803, "Given a string s, reverse the string according to the following rules:\nAll the characters that are not English letters remain in the same position.\nAll the English letters (lowercase or uppercase) should be reversed.\nReturn s after reversing it.\n\nExample 1:\nInput: s = \"ab-cd\"\nOutput: \"dc-ba\"\n\nExample 2:\nInput: s = \"a-bC-dEf-ghIj\"\nOutput: \"j-Ih-gfE-dCba\"\n\nExample 3:\nInput: s = \"Test1ng-Leet=code-Q!\"\nOutput: \"Qedo1ct-eeLg=ntse-T!\"": 0.28148148148148144, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.26666666666666666, "Given a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters. If there are multiple substrings with equal lengths, return the leftmost one.": 0.26373626373626374, "Given a string s, determine whether it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nExample 1:\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\nExample 2:\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n\nExample 3:\nInput: s = \" \"\nOutput: true\nExplanation: s consists of only space characters.\nBecause whitespace characters are ignored, it is treated as an empty string \"\", which is a palindrome.\n\nExample 4:\nInput: s = \"-.\"\nOutput: true\nExplanation: \"-.\" is a palindrome.\n\nExample 5:\nInput: s = \"*#@&$%\"\nOutput: true\nExplanation: \"*#@&$%\" is a palindrome.\nAlthough we treat \"#\" differently from other symbols, it is still a palindrome.": 0.24561403508771934, "Given a string `s`, find the length of the longest substring without repeating characters.": 0.21621621621621623, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.2135922330097087, "Imagine you are building a compiler for a very basic programming language. Your job is to implement a parser for arithmetic expressions. An expression consists of digits, addition, multiplication, parenthesis, and negative signs. Expressions look something like this:\n\n```\n1+(2-(3*(-4)))\n```\n\nIn this example, the expression evaluates to 1+(2-(3*(-4))) = 1+(2-(-12)) = 1+(2+12) = 14.\n\nA sample input could be:\n\n```\n1+(2-(3*(-4)))\n```\n\nAnd a corresponding output could be:\n\n```\n14\n```\n\nIf the input does not represent a well-formed expression, throw an exception.": 0.20134228187919465}, "avg_similarity_score": 0.1007168507488438}
{"instruction": "Given a positive integer N, write a function that computes the smallest number of coins needed to make change for N cents, if you have infinite supply of each of S = { S1, S2, .. , Sm} valued coins.", "input": "", "output": "Here's a dynamic programming based solution to this problem:\n\n```cpp\nvector<int> coinChangeMinCoin(const vector<int>& coins, const int& amount) {\n    vector<int> minCoins(amount + 1, INT_MAX), ans;\n    minCoins[0] = 0;\n    for (auto coin : coins) {\n        for (size_t amt = 1; amt <= amount; ++amt) {\n            auto prev = minCoins[amt - coin];\n            if ((prev != INT_MAX) && (minCoins[amt] > prev + 1)) {\n                minCoins[amt] = prev + 1;\n            }\n        }\n    }\n    size_t currAmount = amount;\n    while (currAmount--) {\n        ans.insert(ans.begin(), minCoins[currAmount]);\n    }\n    return ans;\n}\n```\nFirst, we initialize a vector minCoins of size amount + 1 whose entries initially take the value INT_MAX. We then update the entry minCoins[0] to zero. Why did we choose to initialize minCoins[0] to zero? Well, if we didn't, then we wouldn't be able to handle the situation where amount is zero. That's why we initialized minCoins[0] to zero.\n\nNext, we iterate through the coins and compute the minimum number of coins required to make change for amounts ranging from 1 to amount inclusive. To do so, we iterate through the coins and for each coin, we try to subtract it from the current amount. If the difference is still valid, we update the minimum number of coins required accordingly.\n\nAfter computing the minimum number of coins required for all possible amounts, we traverse the vector minCoins backwards until we reach the desired amount. Along the way, we record the minimum number of coins required along the way.", "most_similar": {"Write a function that counts the total number of prime numbers up to N.": 0.36, "Alice has some coins and Bob wants to give Alice money. Write a program which takes as input the amount of money Alice needs and outputs the least number of coins needed to pay Alice. Assume there are infinite supply of coins.": 0.30769230769230765, "Write a function that computes the greatest common divisor of two positive integer numbers. Use Euclid's Algorithm.": 0.2962962962962963, "Write a function that calculates the sum of all odd fibonacci numbers below n.": 0.28, "Write a function that takes a nonnegative integer N as input and computes the binary representation of N.\n\nExample:\nInput: 5\nOutput: [1,0,1]": 0.26229508196721313, "Write a function that reverses a string. The input string is given as an array of characters s.": 0.25925925925925924, "Write a program to compute the sum of integers from k to n.": 0.2448979591836735, "Write a function that counts the occurrences of a substring within a string.": 0.2448979591836735, "Write a Python function to find all prime numbers up to the given number n.": 0.23529411764705882, "Write a function that finds the longest common prefix string amongst an array of strings.\n\nIf there is no common prefix, return an empty string \"\".": 0.22950819672131148}, "avg_similarity_score": 0.12638045064609715}
{"instruction": "Given a sorted linked list, delete all duplicates such that each element appear only once.", "input": "", "output": "Here's a straightforward solution to this problem:\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */\n/**\n * @param {ListNode} head\n * @return {ListNode}\n */\nvar deleteDuplicates = function(head) {\n    if (head === null) {\n        return null;\n    }\n    let cur = head;\n    while (cur !== null) {\n        while (cur.next !== null && cur.val === cur.next.val) {\n            cur.next = cur.next.next;\n        }\n        cur = cur.next;\n    }\n    return head;\n};\n```\nIn the above program, we maintain a pointer cur pointing to the current node. Initially, cur points to the head of the linked list. While cur is not null, we repeatedly advance cur forward until we reach a node whose value differs from the next node. Once we reach such a node, we remove all subsequent duplicate nodes. Finally, we return the updated linked list.", "most_similar": {"Write a function that reverses a singly linked list. Do NOT use recursion!": 0.21428571428571427, "Write a function that takes a positive integer N as input and outputs a list of lists representing all the ways of partitioning N such that each sublist contains consecutive integers starting from 1.\n\nExample:\nInput: 5\nOutput: [[1],[2,3],[4,5]]": 0.2068965517241379, "Write a simple C++ program that prints \"Hello, World!\".": 0.16666666666666669, "Write a simple C# program that prints \"Hello, World!\".": 0.16666666666666669, "Given a positive integer N, write a function that computes the smallest number of coins needed to make change for N cents, if you have infinite supply of each of S = { S1, S2, .. , Sm} valued coins.": 0.1568627450980392, "Write a Python function to reverse a given list of integers.": 0.15384615384615383, "Write a python script that runs shellscript.sh every 60 minutes": 0.15384615384615383, "write a c++ program that calculates the perimeter of a square": 0.15384615384615383, "Given an array of integers `nums` and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.": 0.1515151515151515, "Write a python function that sorts a list from large to small.": 0.14814814814814814}, "avg_similarity_score": 0.0803651770605334}
{"instruction": "Given a string, your task is to count how many palindromic substrings in this string.\n\nThe substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.\n\nExample 1:\nInput: \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n\nExample 2:\nInput: \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n\nNote:\nThe input string length won't exceed 1000.", "input": "", "output": "Here's a simple C++ program to accomplish this task:\n\n```cpp\nint countSubstrings(string s) {\n    int n = s.size(), count = 0;\n    bool t[n][n];\n    memset(t, false, sizeof(t));\n    for (int i = n - 1; i >= 0; --i) {\n        for (int j = i; j < n; ++j) {\n            if (s[i] == s[j] && (j - i < 3 || t[i + 1][j - 1])) {\n                t[i][j] = true;\n                ++count;\n            }\n        }\n    }\n    return count;\n}\n```\nIn the above program, we declare a 2d boolean matrix t of dimension n \u00d7 n. Each cell t[i][j] denotes whether the substring s[i..j] is a palindrome. We fill the cells row-wise. Specifically, we first fill the bottom-most row. Then, we go upwards filling the rest of the rows.\n\nOnce we have computed the table t, we scan across it to count the total number of palindromic substrings.", "most_similar": {"You are given a string s consisting of small English letters. Your task is to reverse the order of vowels in this string.\nA vowel is a letter 'a','o','u','e','i'.\nExample 1:\nInput: s = \"hello\"\nOutput: \"holle\"\nExample 2:\nInput: s = \"leetcode\"\nOutput: \"leotcede\"\nConstraints:\n1 <= s.length <= 3 * 10^5\ns consists of printable ASCII characters.": 0.2857142857142857, "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n\nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\n\nExample 1:\nInput: s = \"bcabc\"\nOutput: \"abc\"\n\nExample 2:\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"": 0.27941176470588236, "Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitions of s.\n\nAn empty string is also considered valid.\n\nExample 1:\nInput: s = \"aab\"\nOutput: [[\"aa\",\"b\"],[\"a\",\"a\",\"b\"]]\n\nExample 2:\nInput: s = \"a\"\nOutput: [[\"a\"]]": 0.2644628099173554, "Given a string s, reverse the string according to the following rules:\nAll the characters that are not English letters remain in the same position.\nAll the English letters (lowercase or uppercase) should be reversed.\nReturn s after reversing it.\n\nExample 1:\nInput: s = \"ab-cd\"\nOutput: \"dc-ba\"\n\nExample 2:\nInput: s = \"a-bC-dEf-ghIj\"\nOutput: \"j-Ih-gfE-dCba\"\n\nExample 3:\nInput: s = \"Test1ng-Leet=code-Q!\"\nOutput: \"Qedo1ct-eeLg=ntse-T!\"": 0.22972972972972974, "Given a string s, determine whether it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nExample 1:\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\nExample 2:\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n\nExample 3:\nInput: s = \" \"\nOutput: true\nExplanation: s consists of only space characters.\nBecause whitespace characters are ignored, it is treated as an empty string \"\", which is a palindrome.\n\nExample 4:\nInput: s = \"-.\"\nOutput: true\nExplanation: \"-.\" is a palindrome.\n\nExample 5:\nInput: s = \"*#@&$%\"\nOutput: true\nExplanation: \"*#@&$%\" is a palindrome.\nAlthough we treat \"#\" differently from other symbols, it is still a palindrome.": 0.21739130434782608, "Given a string s consisting of small English letters, find and return the first instance of a non-repeating character in it. If there is no such character, return '_'.\n\nExamples:\n\nInput: s = \"abacabad\"\nOutput: \"b\"\nExplanation: The first non-repeating character is 'b'.\n\nInput: s = \"zabbaxxxxyyyyzzzyabcd\"\nOutput: \"_\"\nExplanation: There are no characters that appear exactly once.\n\nInput: s = \"abcdeeeefghiijklmnoppqqrrssstuvwxyz\"\nOutput: \"t\"\nExplanation: The first non-repeating character is 't'.\n\nInput: s = \"\"\nOutput: \"_\"\nExplanation: An empty string has no characters.": 0.19736842105263158, "You are given a binary tree in which each node contains an integer value. Find the largest value in each row of the tree.\n\nExample:\nInput:\n\n        1\n     /     \\\n    3       2\nOutput: [1, 3, 2]\nExplanation:\nRow 1: 1 is the largest integer in the row.\nRow 2: 3 is the largest integer in the row.\nRow 3: 2 is the largest integer in the row.": 0.17518248175182483, "Imagine you are building a compiler for a very basic programming language. Your job is to implement a parser for arithmetic expressions. An expression consists of digits, addition, multiplication, parenthesis, and negative signs. Expressions look something like this:\n\n```\n1+(2-(3*(-4)))\n```\n\nIn this example, the expression evaluates to 1+(2-(3*(-4))) = 1+(2-(-12)) = 1+(2+12) = 14.\n\nA sample input could be:\n\n```\n1+(2-(3*(-4)))\n```\n\nAnd a corresponding output could be:\n\n```\n14\n```\n\nIf the input does not represent a well-formed expression, throw an exception.": 0.1728395061728395, "Implement a function that accepts a string containing digits from 2-9 with various lengths. The function should replace every digit with the word equivalent of that digit (e.g., 2 becomes \u2018two\u2019, 3 becomes \u2018three\u2019, \u2026 , 9 becomes \u2018nine\u2019). There is no need to validate the contents of the input string.": 0.16129032258064516, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.1553398058252427}, "avg_similarity_score": 0.08547671669770772}
{"instruction": "Given a string, find the longest palindromic contiguous substring. Substring of string s:\nS[i...j]\nLength of a substring: j \u2013 i + 1\nPalindrome string: Elements read the same backward as well as forward.\nLongest Palindromic Substring: Longest substring of a given string which is also a palindrome.\n\nExample 1:\nInput: \"banana\"\nOutput: \"anana\"\n\nExample 2:\nInput: \"abcdzdcab\"\nOutput: \"cdcaba\"", "input": "", "output": "Here's a simple C++ program to accomplish this task:\n\n```cpp\nstring longestPalindrome(string s) {\n    int n = s.size();\n    int start = 0, maxLen = 0;\n    bool p[n][n];\n    memset(p, false, sizeof(p));\n    for (int i = n - 1; i >= 0; --i) {\n        for (int j = i; j < n; ++j) {\n            if (s[i] == s[j] && (j - i < 3 || p[i + 1][j - 1])) {\n                p[i][j] = true;\n                if (maxLen < j - i + 1) {\n                    start = i;\n                    maxLen = j - i + 1;\n                }\n            }\n        }\n    }\n    return s.substr(start, maxLen);\n}\n```\nIn the above program, we declare a 2d boolean matrix p of dimension n \u00d7 n. Each cell p[i][j] denotes whether the substring s[i\u2026j] is a palindrome. We fill the cells row-wise. Specifically, we first fill the bottom-most row. Then, we go upwards filling the rest of the rows.\n\nOnce we have computed the table p, we scan across it to locate the longest palindromic substring.", "most_similar": {"Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitions of s.\n\nAn empty string is also considered valid.\n\nExample 1:\nInput: s = \"aab\"\nOutput: [[\"aa\",\"b\"],[\"a\",\"a\",\"b\"]]\n\nExample 2:\nInput: s = \"a\"\nOutput: [[\"a\"]]": 0.3703703703703704, "You are given a string s consisting of small English letters. Your task is to reverse the order of vowels in this string.\nA vowel is a letter 'a','o','u','e','i'.\nExample 1:\nInput: s = \"hello\"\nOutput: \"holle\"\nExample 2:\nInput: s = \"leetcode\"\nOutput: \"leotcede\"\nConstraints:\n1 <= s.length <= 3 * 10^5\ns consists of printable ASCII characters.": 0.3, "Given a string `s`, find the length of the longest substring without repeating characters.": 0.2702702702702703, "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n\nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\n\nExample 1:\nInput: s = \"bcabc\"\nOutput: \"abc\"\n\nExample 2:\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"": 0.2601626016260163, "Given a string, your task is to count how many palindromic substrings in this string.\n\nThe substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.\n\nExample 1:\nInput: \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n\nExample 2:\nInput: \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n\nNote:\nThe input string length won't exceed 1000.": 0.24060150375939848, "Given a string s, reverse the string according to the following rules:\nAll the characters that are not English letters remain in the same position.\nAll the English letters (lowercase or uppercase) should be reversed.\nReturn s after reversing it.\n\nExample 1:\nInput: s = \"ab-cd\"\nOutput: \"dc-ba\"\n\nExample 2:\nInput: s = \"a-bC-dEf-ghIj\"\nOutput: \"j-Ih-gfE-dCba\"\n\nExample 3:\nInput: s = \"Test1ng-Leet=code-Q!\"\nOutput: \"Qedo1ct-eeLg=ntse-T!\"": 0.22222222222222224, "Given a string s, determine whether it is a palindrome, considering only alphanumeric characters and ignoring cases.\n\nExample 1:\nInput: s = \"A man, a plan, a canal: Panama\"\nOutput: true\nExplanation: \"amanaplanacanalpanama\" is a palindrome.\n\nExample 2:\nInput: s = \"race a car\"\nOutput: false\nExplanation: \"raceacar\" is not a palindrome.\n\nExample 3:\nInput: s = \" \"\nOutput: true\nExplanation: s consists of only space characters.\nBecause whitespace characters are ignored, it is treated as an empty string \"\", which is a palindrome.\n\nExample 4:\nInput: s = \"-.\"\nOutput: true\nExplanation: \"-.\" is a palindrome.\n\nExample 5:\nInput: s = \"*#@&$%\"\nOutput: true\nExplanation: \"*#@&$%\" is a palindrome.\nAlthough we treat \"#\" differently from other symbols, it is still a palindrome.": 0.2222222222222222, "Given a string s consisting of lowercase English letters, find the length of the longest substring without repeating characters. If there are multiple substrings with equal lengths, return the leftmost one.": 0.21978021978021975, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.2, "Write a function that counts the occurrences of a substring within a string.": 0.1917808219178082}, "avg_similarity_score": 0.09271632773481962}
{"instruction": "Given a string, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\nExample 1:\nInput: \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer.\n\nExample 2:\nInput: \"cbbd\"\nOutput: \"bb\"", "input": "", "output": "Here's a simple C++ program to accomplish this task:\n\n```cpp\nstring longestPalindrome(string s) {\n    int n = s.size();\n    int start = 0, maxLen = 0;\n    bool p[n][n];\n    memset(p, false, sizeof(p));\n    for (int i = n - 1; i >= 0; --i) {\n        for (int j = i; j < n; ++j) {\n            if (s[i] == s[j] && (j - i < 3 || p[i + 1][j - 1])) {\n                p[i][j] = true;\n                if (maxLen < j - i + 1) {\n                    start = i;\n                    maxLen = j - i + 1;\n                }\n            }\n        }\n    }\n    return s.substr(start, maxLen);\n}\n```\nIn the above program, we declare a 2d boolean matrix p of dimension n \u00d7 n. Each cell p[i][j] denotes whether the substring s[i\u2026j] is a palindrome. We fill the cells row-wise. Specifically, we first fill the bottom-most row. Then, we go upwards filling the rest of the rows.\n\nOnce we have computed the table p, we scan across it to locate the longest palindromic substring.", "most_similar": {"Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitions of s.\n\nAn empty string is also considered valid.\n\nExample 1:\nInput: s = \"aab\"\nOutput: [[\"aa\",\"b\"],[\"a\",\"a\",\"b\"]]\n\nExample 2:\nInput: s = \"a\"\nOutput: [[\"a\"]]": 0.4090909090909091, "Given a string, find the longest palindromic contiguous substring. Substring of string s:\nS[i...j]\nLength of a substring: j \u2013 i + 1\nPalindrome string: Elements read the same backward as well as forward.\nLongest Palindromic Substring: Longest substring of a given string which is also a palindrome.\n\nExample 1:\nInput: \"banana\"\nOutput: \"anana\"\n\nExample 2:\nInput: \"abcdzdcab\"\nOutput: \"cdcaba\"": 0.4, "You are given a string s consisting of small English letters. Your task is to reverse the order of vowels in this string.\nA vowel is a letter 'a','o','u','e','i'.\nExample 1:\nInput: s = \"hello\"\nOutput: \"holle\"\nExample 2:\nInput: s = \"leetcode\"\nOutput: \"leotcede\"\nConstraints:\n1 <= s.length <= 3 * 10^5\ns consists of printable ASCII characters.": 0.3, "Given a string s, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.\n\nNote: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/\n\nExample 1:\nInput: s = \"bcabc\"\nOutput: \"abc\"\n\nExample 2:\nInput: s = \"cbacdcbc\"\nOutput: \"acdb\"": 0.29126213592233, "Given a string, your task is to count how many palindromic substrings in this string.\n\nThe substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.\n\nExample 1:\nInput: \"abc\"\nOutput: 3\nExplanation: Three palindromic strings: \"a\", \"b\", \"c\".\n\nExample 2:\nInput: \"aaa\"\nOutput: 6\nExplanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n\nNote:\nThe input string length won't exceed 1000.": 0.2831858407079646, "Write a function that checks if a given string is a palindrome. Assume that the maximum length of the string is 1000 characters. What techniques can you use to speed up the checking process?": 0.27027027027027023, "Given a string s, reverse the string according to the following rules:\nAll the characters that are not English letters remain in the same position.\nAll the English letters (lowercase or uppercase) should be reversed.\nReturn s after reversing it.\n\nExample 1:\nInput: s = \"ab-cd\"\nOutput: \"dc-ba\"\n\nExample 2:\nInput: s = \"a-bC-dEf-ghIj\"\nOutput: \"j-Ih-gfE-dCba\"\n\nExample 3:\nInput: s = \"Test1ng-Leet=code-Q!\"\nOutput: \"Qedo1ct-eeLg=ntse-T!\"": 0.26086956521739135, "Given a string `s`, find the length of the longest substring without repeating characters.": 0.25925925925925924, "Given a string s consisting of small English letters, find and return the first instance of a non-repeating character in it. If there is no such character, return '_'.\n\nExamples:\n\nInput: s = \"abacabad\"\nOutput: \"b\"\nExplanation: The first non-repeating character is 'b'.\n\nInput: s = \"zabbaxxxxyyyyzzzyabcd\"\nOutput: \"_\"\nExplanation: There are no characters that appear exactly once.\n\nInput: s = \"abcdeeeefghiijklmnoppqqrrssstuvwxyz\"\nOutput: \"t\"\nExplanation: The first non-repeating character is 't'.\n\nInput: s = \"\"\nOutput: \"_\"\nExplanation: An empty string has no characters.": 0.23529411764705885, "Write a function that takes a string s consisting of lowercase letters and brackets, and returns whether or not the brackets in the string are balanced.\n\nExample:\nInput: \"(())()\"\nOutput: True": 0.2285714285714286}, "avg_similarity_score": 0.12206988086643582}
