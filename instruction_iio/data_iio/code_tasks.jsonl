{"id": "seed_task_0", "name": "write_comments_in_python", "instruction": "Add comments in the given function to make the code more readable for humans.", "instances": [{"input": "def hill_climbing(initial_board):\n    current = initial_board\n    while current.has_successors():\n        neighbour = Board(current.get_random_successor(), \"best\")\n        if neighbour.value() >= current.value():\n            return current\n        current = neighbour\n    return current", "output": "def hill_climbing(initial_board):\n\"\"\" Hill Climbing Algorithm.\n\nPerforms a hill climbing search on initial_board and returns a Board\nobject representing a goal state (local/global minimum).\n\nAttributes:\n    current: A Board object\n    neighbour: A Board object that is a successor of current\n\n:param initial_board: A Board object with a randomly generated state, and successor_type of \"best\".\n                      i.e. a start state\n:return: A Board object that has no further successors. i.e. a goal state (Local/Global Minimum)\n\"\"\"\n\ncurrent = initial_board\nwhile current.has_successors():\n    neighbour = Board(current.get_random_successor(), \"best\")\n    if neighbour.value() >= current.value():\n        return current\n    current = neighbour\nreturn current"}], "is_classification": false}
{"id": "seed_task_1", "name": "complete_python_code", "instruction": "Suggest a completion for the following python code.", "instances": [{"input": "import json\n\ndef read_task_from_jsonl(data_file):\n    '''This function will read a .jsonl file and return the ``task`` fields in all the lines.'''", "output": "import json\n\ndef read_task_from_jsonl(data_file):\n    '''This function will read a .jsonl file and return the ``task`` fields in all the lines.'''\n    with open(data_file) as fin:\n        return [json.loads(line)['task'] for line in fin]"}], "is_classification": false}
{"id": "seed_task_2", "name": "solving_equation", "instruction": "Solving the equation and find the value of X. Show your steps.", "instances": [{"input": "10X + 5 = 10", "output": "10X = 5\nX = 0.5"}], "is_classification": false}
{"id": "seed_task_3", "name": "code_todo", "instruction": "Using the comment as a guide, replace the \"TODO\" comment in the code with the proper code.", "instances": [{"input": "def greet_to(name):\n    \"\"\"Print a greeting to the name provided.\"\"\"\n    # TODO: assert name is a string\n    print(\"Hello, \" + name + \"!\")", "output": "def greet_to(name):\n    \"\"\"Print a greeting to the name provided.\"\"\"\n    # assert name is a string\n    assert isinstance(name, str), \"name must be a string\"\n    print(\"Hello, \" + name + \"!\")"}], "is_classification": false}
{"id": "seed_task_4", "name": "regular_expression_generation", "instruction": "Generate the regular expression based on the description.", "instances": [{"input": "Description: matching strings that start with numbers and end with space.", "output": "^[0-9].*\\s$"}], "is_classification": false}
{"id": "seed_task_5", "name": "math_word_problem_with_reasoning", "instruction": "Answer the following math problem. You should write down the reasoning steps.", "instances": [{"input": "Roger has 5 tennis balls. He buys 2 more cans of tennis balls. Each can has 3 tennis balls. How many tennis balls does he have now?", "output": "Roger started with 5 balls. 2 cans of 3 tennis balls each is 6 tennis balls. 5 + 6 = 11. The answer is 11."}], "is_classification": false}
{"id": "seed_task_6", "name": "text_to_sql", "instruction": "Parse the natural language query into a SQL query that can be executed on the table.", "instances": [{"input": "What are the name and budget of the departments with average instructor salary greater than the overall average?\nGiven two tables: instructor, department.", "output": "SELECT d.name, d.budget FROM instructor i JOIN department d ON i.dept_name = d.name GROUP BY i.dept_name HAVING AVG(i.salary) > (SELECT AVG(salary) FROM instructor)"}], "is_classification": false}
{"id": "seed_task_7", "name": "htlm_task", "instruction": "Fill in the <mask> in the html document with a propoer text. You should take the html tag into consideration. You output should be the completed html document.", "instances": [{"input": "<!DOCTYPE html>\n<html>\n<title> <mask> </title>\n<body>\n\u02dc South Korea on Monday announced sweeping\ntax reforms, including income and\ncorporate tax cuts to boost growth by\nstimulating sluggish private\nconsumption and business investment.\n</body>\n</html>", "output": "<!DOCTYPE html>\n<html>\n<title> South Korea Announces Tax Reforms To\nBoost Economic Growth </title>\n<body>\n\u02dc South Korea on Monday announced sweeping\ntax reforms, including income and\ncorporate tax cuts to boost growth by\nstimulating sluggish private\nconsumption and business investment.\n</body>\n</html>"}], "is_classification": false}
{"id": "seed_task_8", "name": "fill_in_the_mask", "instruction": "Replace the <mask> token in the text with proper words that are consistent with the context. You can use multiple words for each <mask> token.", "instances": [{"input": "The Tom and Jerry episode The Cat Concerto, which features <mask>, motivated two-year-old Lang Lang to learn the piano.", "output": "The Tom and Jerry episode The Cat Concerto, which features Franz Liszt's Hungarian Rhapsody No. 2, motivated two-year-old Lang Lang to learn the piano."}], "is_classification": false}
{"id": "seed_task_9", "name": "python_code_generation", "instruction": "Generate a correct python program to fulfill the following purpose:", "instances": [{"input": "Count the occurrence of an element x in a list y.", "output": "def count_x(x, y):\n    count = 0\n    for i in range(y):\n        if i == x:\n            count += 1\n    return count"}], "is_classification": false}
{"id": "seed_task_10", "name": "python_sorting", "instruction": "Write a python function that sorts a list from large to small.", "instances": [{"input": "", "output": "def reverse_sort(lst):\n    return sorted(lst, reverse=True)"}], "is_classification": false}
{"id": "seed_task_11", "name": "anonymizing_human_names", "instruction": "Replace all the human names in the paragraph with <anonymized>.", "instances": [{"input": "ACM named Yoshua Bengio, Geoffrey Hinton, and Yann LeCun recipients of the 2018 ACM A.M. Turing Award for conceptual and engineering breakthroughs that have made deep neural networks a critical component of computing.", "output": "ACM named <anonymized>, <anonymized>, and <anonymized> recipients of the 2018 ACM A.M. Turing Award for conceptual and engineering breakthroughs that have made deep neural networks a critical component of computing."}], "is_classification": false}
{"id": "seed_task_12", "name": "solving_math_problem", "instruction": "Solve the math problems. Intermediate steps are required.", "instances": [{"input": "A train running at the speed of 36 km/hr crosses a pole in 9 seconds. what is the length of the train?", "output": "The speed 36 km/hr = 36 x 1000 / 3600 m/s = 10 m/s. \nThe length of the train = speed x time = 10 x 9 = 90 m.\nSo, the length of the train is 90 meters."}], "is_classification": false}
{"id": "seed_task_13", "name": "word_math_with_algebra", "instruction": "Solving the math word problem with linear algebra equations.", "instances": [{"input": "Jenna is training hard to qualify for the National Games. She has a regular weekly routine, training for five hours a day on some days and 3 hours a day on the other days. She trains altogether 27 hours in a seven day week. On how many days does she train for five hours?", "output": "Sol: Let x = the number of \"5 hour\" days, y = the number of \"3 hour\" days.\nWe know there are seven days in the week, so: x + y = 7.\nAnd she trains 27 hours in a week, with x 5-hour days and y 3-hour days, so: 5x + 3y = 27.\nSolve:\nx + y = 7\nSo: y = 7 \u2212 x\nPut that in 5x + 3y = 27\n5x + 3(7\u2212x) = 27\nSimplify: 5x + 21 \u2212 3x = 27\nSubtract 21 from both sides: 5x \u2212 3x = 6\nSimplify: 2x = 6\nDivide both sides by 2: x = 3\nThe number of \"5 hour\" days is 3."}], "is_classification": false}
{"id": "seed_task_14", "name": "code_for_bitcoin_price", "instruction": "write a code to get the current value of a Bitcoin in US dollars using the bitcoincharts API.", "instances": [{"input": "", "output": "\"\"\"\nGet the current value of a Bitcoin in US dollars using the bitcoincharts api\n\"\"\"\n\nimport requests\nimport json\n\ndef get_bitcoin_price():\n    url = 'http://api.bitcoincharts.com/v1/weighted_prices.json'\n    response = requests.get(url)\n    data = json.loads(response.text)\n    return data['USD']['24h']\n    \nif __name__ == '__main__':\n    print(get_bitcoin_price())"}], "is_classification": false}
{"id": "seed_task_15", "name": "program_for_summation", "instruction": "Write a program to compute the sum of integers from k to n.", "instances": [{"input": "", "output": "def sum(k, n):\n    sum = 0\n    for i in range(k, n+1):\n        sum += i\n    return sum"}], "is_classification": false}
{"id": "seed_task_16", "name": "javascript_date_and_time", "instruction": "Write a script in JavaScript for printing the current date and time.", "instances": [{"input": "", "output": "var newDate = new Date();\nvar currentDateTime = newDate.toLocaleString();\nconsole.log(currentDateTime);"}], "is_classification": false}
{"id": "seed_task_17", "name": "python_leetcode", "instruction": "Write Python code to solve this leetcode problem.", "instances": [{"input": "Problem: You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.\n\nYou may assume the two numbers do not contain any leading zero, except the number 0 itself.", "output": "class Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        carry = 0\n        root = n = ListNode(0)\n        while l1 or l2 or carry:\n            v1 = v2 = 0\n            if l1:\n                v1 = l1.val\n                l1 = l1.next\n            if l2:\n                v2 = l2.val\n                l2 = l2.next\n            carry, val = divmod(v1+v2+carry, 10)\n            n.next = ListNode(val)\n            n = n.next\n        return root.next"}], "is_classification": false}
{"id": "seed_task_18", "name": "solve_equation_system", "instruction": "Solve the following equation system. Give me the final answer.", "instances": [{"input": "3x - 4y = 1, 2x + 3y = 12", "output": "x = 3, y = 2"}], "is_classification": false}
{"id": "seed_task_19", "name": "code_syntax_error", "instruction": "You need to read a code and detect if there is a syntax error or not. Outpus true if there is error, output false if there is not.", "instances": [{"input": "def quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)", "output": "false"}], "is_classification": true}
{"id": "seed_task_20", "name": "pos_tag_for_word", "instruction": "Identify the pos tag of the word in the given sentence.", "instances": [{"input": "Word: excited\nSentence: She felt so excited that her application got approval.", "output": "Adjective, JJ."}], "is_classification": true}
{"id": "seed_task_21", "name": "find_prime_numbers", "instruction": "Write a Python function to find all prime numbers up to the given number n.", "instances": [{"input": "", "output": "def is_prime(n):\n if n <= 1:\n return False\n for i in range(2, int(n**0.5) + 1):\n if n % i == 0:\n return False\n return True\n\ndef find_prime_numbers(n):\n primes = []\n for i in range(2, n + 1):\n if is_prime(i):\n primes.append(i)\n return primes"}], "is_classification": false}
{"id": "seed_task_22", "name": "csharp_hello_world", "instruction": "Write a simple C# program that prints \"Hello, World!\".", "instances": [{"input": "", "output": "using System;\n\nnamespace HelloWorld\n{\n class Program\n {\n static void Main(string[] args)\n {\n Console.WriteLine(\"Hello, World!\");\n }\n }\n}"}], "is_classification": false}
{"id": "seed_task_23", "name": "sql_query", "instruction": "Write an SQL query to select all columns from a table named 'employees' where the age is greater than 30.", "instances": [{"input": "", "output": "SELECT * FROM employees WHERE age > 30;"}], "is_classification": false}
{"id": "seed_task_24", "name": "palindrome_check", "instruction": "Write a Python function to check if a given word is a palindrome or not. A palindrome is a word that reads the same backwards as forwards.", "instances": [{"input": "", "output": "def is_palindrome(word):\n return word == word[::-1]"}], "is_classification": false}
{"id": "seed_task_25", "name": "javascript_alert", "instruction": "Write a JavaScript code snippet to show an alert message with the text \"Welcome to my website!\".", "instances": [{"input": "", "output": "alert('Welcome to my website!');"}], "is_classification": false}
{"id": "seed_task_26", "name": "python_reverse_list", "instruction": "Write a Python function to reverse a given list of integers.", "instances": [{"input": "", "output": "def reverse_list(numbers):\n return numbers[::-1]"}], "is_classification": false}
{"id": "seed_task_27", "name": "html_basic_structure", "instruction": "Write a basic HTML structure with a title \"My First Web Page\".", "instances": [{"input": "", "output": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>My First Web Page</title>\n</head>\n<body>\n\n</body>\n</html>"}], "is_classification": false}
{"id": "seed_task_28", "name": "c_plus_plus_hello_world", "instruction": "Write a simple C++ program that prints \"Hello, World!\".", "instances": [{"input": "", "output": "#include <iostream>\n\nint main() {\n std::cout << \"Hello, World!\" << std::endl;\n return 0;\n}"}], "is_classification": false}
{"id": "seed_task_29", "name": "python_summation", "instruction": "Write a Python function that takes two numbers as input and returns their sum.", "instances": [{"input": "5, 7", "output": "def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 7)\nprint(result)"}], "is_classification": false}
{"id": "seed_task_30", "name": "java_loop_array", "instruction": "Create a JavaScript function that takes an array of numbers and returns the product of all elements.", "instances": [{"input": "[2, 3, 4]", "output": "function multiplyArrayElements(arr) {\n    let product = 1;\n    for (const num of arr) {\n        product *= num;\n    }\n    return product;\n}\n\nconst result = multiplyArrayElements([2, 3, 4]);\nconsole.log(result);"}], "is_classification": false}
{"id": "seed_task_31", "name": "shell_total_lines_in_txt_file", "instruction": "Can you provide a shell script that displays the total number of lines in all '*.txt' files in the current directory?", "instances": [{"input": "\"file1.txt:\\nHello\\nWorld\\n\\nfile2.txt:\\nAnother\\nExample\"", "output": "#!/bin/sh\n\ntotal_lines=0\n\nfor file in *.txt; do\n    lines=$(wc -l < \"$file\")\n    total_lines=$((total_lines + lines))\ndone\n\necho \"Total lines: $total_lines\""}], "is_classification": false}
{"id": "seed_task_32", "name": "java_reverse_string_no_builtin", "instruction": "Implement a Java method to reverse a string without using any built-in functions.", "instances": [{"input": "\"Hello, World!\"", "output": "public class StringReversal {\n    public static String reverseString(String input) {\n        char[] charArray = input.toCharArray();\n        int left = 0;\n        int right = charArray.length - 1;\n\n        while (left < right) {\n            char temp = charArray[left];\n            charArray[left] = charArray[right];\n            charArray[right] = temp;\n\n            left++;\n            right--;\n        }\n        return new String(charArray);\n    }\n\n    public static void main(String[] args) {\n        String str = \"Hello, World!\";\n        System.out.println(\"Reversed string: \" + reverseString(str));\n    }\n}"}], "is_classification": false}
{"id": "seed_task_33", "name": "translate_python_java", "instruction": "Translate the following code from python in Java.", "instances": [{"input" : "def function(a : int, b : int, c : int):\n    if a > b :\n        print('You lost.')\n    else :\n        if c > a :\n            print('Nice try.')\n        else :\n            print('You won.')", "output" : "public static void function(int a, int b, int c) {\n    if (a > b) {\n        System.out.println('You lost.');\n    } else {\n        if (c > a) {\n            System.out.println('Nice try.');\n        } else {\n            System.out.println('You won.');\n        }\n    }\n}"}], "is_classification": false}
{"id": "seed_task_34", "name": "python_leetcode_twosum", "instruction": "Given an array of integers `nums` and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order.", "instances": [{"input" : "", "output" : "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        hashmap = {}\n        for i in range(len(nums)):\n            complement = target - nums[i]\n            if complement in hashmap:\n                return [i, hashmap[complement]]\n            hashmap[nums[i]] = i"}], "is_classification": false}
{"id": "seed_task_35", "name": "python_leetcode_longest_substring_without_repeating_characters", "instruction": "Given a string `s`, find the length of the longest substring without repeating characters.", "instances": [{"input" : "", "output" : "class Solution:\n    def lengthOfLongestSubstring(self, s: str) -> int:\n        n = len(s)\n        ans = 0\n        # mp stores the current index of a character\n        mp = {}\n\n        i = 0\n        # try to extend the range [i, j]\n        for j in range(n):\n            if s[j] in mp:\n                i = max(mp[s[j]], i)\n\n            ans = max(ans, j - i + 1)\n            mp[s[j]] = j + 1\n\n        return ans"}], "is_classification": false}
{"id": "seed_task_36", "name": "python_leetcode_maximum_subarray", "instruction": "Given an integer array nums, find the subarray with the largest sum, and return its sum.", "instances": [{"input" : "", "output" : "class Solution:\n    def maxSubArray(self, nums: List[int]) -> int:\n        N = len(nums)\n        maxSum = float('-inf')\n        maxSumEndi = float('-inf')\n        for i in range(N):\n            maxSumEndi = max(nums[i], maxSumEndi+nums[i])\n            maxSum = max(maxSum, maxSumEndi)\n        return maxSum"}], "is_classification" : false}
{"id": "seed_task_37", "name": "python_leetcode_best_time_to_buy_and_sell_stocks", "instruction": "Write a script to output 'Hello World' in python", "instances": [{"input" : "You are given an array `prices` where `prices[i]` is the price of a given stock on the i^th day. You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock. Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.", "output" : "class Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        min_price = float('inf')\n        max_profit = 0\n        for i in range(len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n                \n        return max_profit"}], "is_classification": false}
{"id": "seed_task_38", "name": "python_leetcode_binary_tree_inorder_traversal", "instruction": "Given the `root` of a binary tree, return the inorder traversal of its nodes' values.", "instances": [{"input" : "# Definition for a binary tree node.\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right", "output" : "class Solution:\n    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:\n        return  self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right) if root else []"}], "is_classification" : false}
{"id": "seed_task_39", "name": "python_leetcode_fibonacci_numbers", "instruction": "The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,\n\nF(0) = 0, F(1) = 1\nF(n) = F(n - 1) + F(n - 2), for n > 1.\nGiven n, calculate F(n)", "instances": [{"input" : "", "output" : "class Solution:\n    def fib(self, n: int) -> int:\n        if n == 0 :\n            return 0\n        elif n == 1 :\n            return 1\n        else :\n            a = 0\n            b = 1\n            for i in range(1, n):\n                a, b = b, a+b\n            return b"}], "is_classification" : false}
{"id": "seed_task_40", "name": "python_mean", "instruction": "Write a script to output the mean of a list of integers.", "instances": [{"input" : "", "output" : "def mean(arr):\n    if len(arr) == 0 :\n        return None\n    else :\n        return sum(arr)/len(arr)"}], "is_classification" : false}